!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_JP_AUTHOR	Hirohito Higashi	/h_east@pop11.odn.ne.jp/
!_TAG_PROGRAM_JP_URL	http://hp.vector.co.jp/authors/VA025040/	//
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.7J1	//
$/;"	m	class:DocCursor
ASSERT	.\gap_vector.h	42;"	d
Allocator	.\gap_vector.h	/^	typedef _A Allocator;$/;"	t	class:std::gap_vector
BLOCK_HAS_SIZE	.\TextDocument.h	42;"	d
BLOCK_HAS_SIZE	.\textBlock.h	21;"	d
BlockData	.\textBlock.h	/^	BlockData(index_t index = 0, index_t position = 0)$/;"	f	struct:BlockData
BlockData	.\textBlock.h	/^struct BlockData$/;"	s
CR	.\charEncoding.h	/^		CR,$/;"	e	enum:CharEncoding::__anon2
CRLF	.\charEncoding.h	/^		CRLF = 0,$/;"	e	enum:CharEncoding::__anon2
CUnitTest	.\unit_test.cpp	/^CUnitTest::CUnitTest(cchar *unitName \/*, CVOStream *out*\/)$/;"	f	class:CUnitTest
CUnitTest	.\unit_test.h	/^class CUnitTest$/;"	c
CharEncoding	.\charEncoding.h	/^namespace CharEncoding {$/;"	n
DBCSsizeTable	.\charEncoding.cpp	/^uchar const DBCSsizeTable[0x100] = {$/;"	v
DBCStable1	.\charEncoding.cpp	/^bool const DBCStable1[0x100] = {		\/\/	ＤＢ文字のファーストバイトかどうか$/;"	v
DBCStable2	.\charEncoding.cpp	/^bool const DBCStable2[0x100] = {		\/\/	ＤＢ文字のセカンドバイトかどうか$/;"	v
DocBlock	.\textBlock.h	/^	DocBlock(TextDocument *document, BlockData block)$/;"	f	class:DocBlock
DocBlock	.\textBlock.h	/^	DocBlock(TextDocument *document, index_t blockNumber, index_t blockPosition)$/;"	f	class:DocBlock
DocBlock	.\textBlock.h	/^	DocBlock(const DocBlock &x)$/;"	f	class:DocBlock
DocBlock	.\textBlock.h	/^class DocBlock$/;"	c
DocBlockItem	.\TextDocument.h	/^	DocBlockItem(size_t size = 0) : m_size(size) {}$/;"	f	struct:DocBlockItem
DocBlockItem	.\TextDocument.h	/^struct DocBlockItem$/;"	s
DocCursor	.\textCursor.h	/^	DocCursor(TextDocument *document = 0, index_t position = 0)$/;"	f	class:DocCursor
DocCursor	.\textCursor.h	/^	DocCursor(TextDocument *document, index_t position, index_t anchor)$/;"	f	class:DocCursor
DocCursor	.\textCursor.h	/^	DocCursor(TextDocument *document, index_t position, index_t anchor,$/;"	f	class:DocCursor
DocCursor	.\textCursor.h	/^	DocCursor(const DocCursor &x)$/;"	f	class:DocCursor
DocCursor	.\textCursor.h	/^class DocCursor$/;"	c
Down	.\textCursor.h	/^		Down,$/;"	e	enum:DocCursor::__anon2
EOLOffset	.\textBlock.cpp	/^index_t DocBlock::EOLOffset() const$/;"	f	class:DocBlock
EOLOffset	.\textBlock.cpp	/^index_t ViewBlock::EOLOffset() const$/;"	f	class:ViewBlock
EOLText	.\TextDocument.cpp	/^QString TextDocument::EOLText() const$/;"	f	class:TextDocument
EOL_CR	.\TextDocument.h	/^	EOL_CR,$/;"	e	enum:__anon1
EOL_CRLF	.\TextDocument.h	/^	EOL_CRLF,$/;"	e	enum:__anon1
EOL_LF	.\TextDocument.h	/^	EOL_LF,$/;"	e	enum:__anon1
EOL_UNKNOWN	.\TextDocument.h	/^	EOL_UNKNOWN = 0,$/;"	e	enum:__anon1
EUC	.\charEncoding.h	/^		EUC,$/;"	e	enum:CharEncoding::__anon1
EUC_KANA_LEADBYTE	.\charEncoding.cpp	27;"	d	file:
EndOfBlock	.\textCursor.h	/^		EndOfBlock,$/;"	e	enum:DocCursor::__anon2
EndOfDocument	.\textCursor.h	/^		EndOfDocument,$/;"	e	enum:DocCursor::__anon2
EndOfWord	.\textCursor.h	/^		EndOfWord,$/;"	e	enum:DocCursor::__anon2
FINDDLG_H	.\FindDlg.h	24;"	d
FindBackWard	.\findOpt.h	/^	FindBackWard = 0x04,$/;"	e	enum:__anon4
FindDlg	.\FindDlg.cpp	/^FindDlg::FindDlg(const QString &text, QWidget *parent, ushort matchCase)$/;"	f	class:FindDlg
FindDlg	.\FindDlg.h	/^class FindDlg : public QDialog$/;"	c
GVUNDOITEM_BLOCK	.\TextDocument.h	/^	GVUNDOITEM_BLOCK = 0x0200,			\/\/	CUndoItemBlock かどうか$/;"	e	enum:__anon2
GVUNDOITEM_CONCAT_ALL	.\TextDocument.h	/^	GVUNDOITEM_CONCAT_ALL = 0x0040,		\/\/	挿入文字列連結可能$/;"	e	enum:__anon2
GVUNDOITEM_CONCAT_LINE	.\TextDocument.h	/^	GVUNDOITEM_CONCAT_LINE = 0x0020,	\/\/	挿入文字列連結可能$/;"	e	enum:__anon2
GVUNDOITEM_CUR_TAIL	.\TextDocument.h	/^	GVUNDOITEM_CUR_TAIL = 0x0008,		\/\/	削除の時、カーソルが最後にあった$/;"	e	enum:__anon2
GVUNDOITEM_DELETE	.\TextDocument.h	/^	GVUNDOITEM_DELETE = 0x0080,			\/\/	or BackSpace$/;"	e	enum:__anon2
GVUNDOITEM_DIFF_RESTORE	.\TextDocument.h	/^	GVUNDOITEM_DIFF_RESTORE = 0x0800,		\/\/	diff で相手ファイルにあわせる$/;"	e	enum:__anon2
GVUNDOITEM_INSTEXT	.\TextDocument.h	/^	GVUNDOITEM_INSTEXT = 0x8000,		\/\/	文字列の挿入を行った$/;"	e	enum:__anon2
GVUNDOITEM_MADELINE	.\TextDocument.h	/^	GVUNDOITEM_MADELINE = 0x0004,$/;"	e	enum:__anon2
GVUNDOITEM_MARK_POS	.\TextDocument.h	/^	GVUNDOITEM_MARK_POS = 0x0100,		\/\/	CUndoItemMarkPos かどうか$/;"	e	enum:__anon2
GVUNDOITEM_REDO_MF_OFF	.\TextDocument.h	/^	GVUNDOITEM_REDO_MF_OFF = 0x0002,	\/\/	Redo でモディファイフラグがＯＮからＯＦＦに$/;"	e	enum:__anon2
GVUNDOITEM_REDRAW	.\TextDocument.h	/^	GVUNDOITEM_REDRAW = 0x4000,			\/\/	:m の場合の様に強制的にリドローする$/;"	e	enum:__anon2
GVUNDOITEM_REPTEXT	.\TextDocument.h	/^	GVUNDOITEM_REPTEXT = 0x1000,		\/\/	文字列の置換を行った$/;"	e	enum:__anon2
GVUNDOITEM_SAVED	.\TextDocument.h	/^	GVUNDOITEM_SAVED = 0x0400,			\/\/	ドキュメントが保存された$/;"	e	enum:__anon2
GVUNDOITEM_SHIFT_LEFT	.\TextDocument.h	/^	GVUNDOITEM_SHIFT_LEFT = 0x0010,$/;"	e	enum:__anon2
GVUNDOITEM_SHIFT_RIGHT	.\TextDocument.h	/^	GVUNDOITEM_SHIFT_RIGHT = 0x0000,$/;"	e	enum:__anon2
GVUNDOITEM_TRANSLATE	.\TextDocument.h	/^	GVUNDOITEM_TRANSLATE = 0x2000,		\/\/	コード変換の場合$/;"	e	enum:__anon2
GVUNDOITEM_TYPE_ERASE	.\TextDocument.h	/^	GVUNDOITEM_TYPE_ERASE,$/;"	e	enum:__anon3
GVUNDOITEM_TYPE_INSERT	.\TextDocument.h	/^	GVUNDOITEM_TYPE_INSERT,$/;"	e	enum:__anon3
GVUNDOITEM_TYPE_REPLACE	.\TextDocument.h	/^	GVUNDOITEM_TYPE_REPLACE,$/;"	e	enum:__anon3
GVUNDOITEM_TYPE_RESIZE	.\TextDocument.h	/^	GVUNDOITEM_TYPE_RESIZE = 1,$/;"	e	enum:__anon3
GVUNDOITEM_UNDO_MF_OFF	.\TextDocument.h	/^	GVUNDOITEM_UNDO_MF_OFF = 0x0001,	\/\/	Undo でモディファイフラグがＯＮからＯＦＦに$/;"	e	enum:__anon2
GVUndoItem	.\TextDocument.h	/^	GVUndoItem()$/;"	f	struct:GVUndoItem
GVUndoItem	.\TextDocument.h	/^	GVUndoItem(uchar type,$/;"	f	struct:GVUndoItem
GVUndoItem	.\TextDocument.h	/^struct GVUndoItem$/;"	s
GVUndoMgr	.\TextDocument.h	/^	GVUndoMgr() : m_current(0)$/;"	f	class:GVUndoMgr
GVUndoMgr	.\TextDocument.h	/^class GVUndoMgr$/;"	c
GV_USE_ITR_FACADE	.\gap_vector.h	25;"	d
HIST_LIMIT	.\FindDlg.cpp	26;"	d	file:
INVALID_INDEX	.\textCursor.h	28;"	d
INVALID_INDEX	.\textBlock.h	22;"	d
IgnoreCase	.\findOpt.h	/^	IgnoreCase = 0,$/;"	e	enum:__anon4
IgnoreLowerCase	.\findOpt.h	/^	IgnoreLowerCase = 0x02,		\/\/	小文字のみ検索時：大文字小文字同一視$/;"	e	enum:__anon4
KeepAnchor	.\textCursor.h	/^		KeepAnchor,$/;"	e	enum:DocCursor::__anon1
LAIDOUT_BLOCKS_MGR	.\TextView.h	26;"	d
LAYOUTTHREAD_H	.\LayoutThread.h	2;"	d
LAZY_LAIDOUT	.\TextView.h	27;"	d
LF	.\charEncoding.h	/^		LF,$/;"	e	enum:CharEncoding::__anon2
LaidoutBlock	.\textBlock.h	/^	LaidoutBlock(LaidoutBlocksMgr *lbMgr, BlockData viewBlockData, BlockData docBlockData)$/;"	f	class:LaidoutBlock
LaidoutBlock	.\textBlock.h	/^	LaidoutBlock(\/*TextView *view,*\/ LaidoutBlocksMgr *lbMgr)$/;"	f	class:LaidoutBlock
LaidoutBlock	.\textBlock.h	/^class LaidoutBlock$/;"	c
LaidoutBlocksMgr	.\textBlock.cpp	/^LaidoutBlocksMgr::LaidoutBlocksMgr(TextDocument *document)$/;"	f	class:LaidoutBlocksMgr
LaidoutBlocksMgr	.\textBlock.h	/^class LaidoutBlocksMgr$/;"	c
LaidoutChunk	.\textBlock.h	/^	LaidoutChunk()$/;"	f	struct:LaidoutChunk
LaidoutChunk	.\textBlock.h	/^	LaidoutChunk(const LaidoutChunk &x)$/;"	f	struct:LaidoutChunk
LaidoutChunk	.\textBlock.h	/^	LaidoutChunk(size_t unLaidoutDocBlockCount,$/;"	f	struct:LaidoutChunk
LaidoutChunk	.\textBlock.h	/^struct LaidoutChunk$/;"	s
LayoutThread	.\LayoutThread.cpp	/^LayoutThread::LayoutThread(QObject *parent)$/;"	f	class:LayoutThread
LayoutThread	.\LayoutThread.h	/^class LayoutThread : public QThread$/;"	c
Left	.\textCursor.h	/^		Left,$/;"	e	enum:DocCursor::__anon2
MAINWINDOW_H	.\mainwindow.h	24;"	d
MARGIN_LEFT	.\TextView.cpp	61;"	d	file:
MainWindow	.\mainwindow.cpp	/^MainWindow::MainWindow(QWidget *parent, Qt::WFlags flags)$/;"	f	class:MainWindow
MainWindow	.\mainwindow.cpp	/^MainWindow::MainWindow(const QString &fileName, QWidget *parent, Qt::WFlags flags)$/;"	f	class:MainWindow
MainWindow	.\mainwindow.h	/^class MainWindow : public QMainWindow$/;"	c
MainWindowClass	.\GeneratedFiles\ui_mainwindow.h	/^    class MainWindowClass: public Ui_MainWindowClass {};$/;"	c	namespace:Ui
MatchCase	.\findOpt.h	/^	MatchCase = 0x01,$/;"	e	enum:__anon4
MaxRecentFiles	.\mainwindow.h	/^    enum { MaxRecentFiles = 10 };$/;"	e	enum:MainWindow::__anon1
MoveAnchor	.\textCursor.h	/^		MoveAnchor = 0,$/;"	e	enum:DocCursor::__anon1
NextBlock	.\textCursor.h	/^		NextBlock,$/;"	e	enum:DocCursor::__anon2
NextWord	.\textCursor.h	/^		NextWord,$/;"	e	enum:DocCursor::__anon2
NoMove	.\textCursor.h	/^		NoMove = 0,$/;"	e	enum:DocCursor::__anon2
OutputFunc	.\unit_test.h	/^typedef void (*OutputFunc)(const QString &);$/;"	t
PLAINTEXTEDIT_H	.\TextView.h	24;"	d
PTR_ALLOCATOR	.\gap_vector.h	39;"	d
PrevBlock	.\textCursor.h	/^		PrevBlock,$/;"	e	enum:DocCursor::__anon2
PrevWord	.\textCursor.h	/^		PrevWord,$/;"	e	enum:DocCursor::__anon2
REPLACEDLG_H	.\ReplaceDlg.h	24;"	d
ReplaceDlg	.\ReplaceDlg.h	/^class ReplaceDlg : public QDialog$/;"	c
ReplaceDlg	.\ReplaceDlg.cpp	/^ReplaceDlg::ReplaceDlg(QWidget *parent, ushort matchCase)$/;"	f	class:ReplaceDlg
Right	.\textCursor.h	/^		Right,$/;"	e	enum:DocCursor::__anon2
SFailedInfo	.\unit_test.h	/^	SFailedInfo(const QString &fileName, int lineNum, QString mess="")$/;"	f	struct:SFailedInfo
SFailedInfo	.\unit_test.h	/^	SFailedInfo(const SFailedInfo &src)$/;"	f	struct:SFailedInfo
SFailedInfo	.\unit_test.h	/^struct SFailedInfo$/;"	s
SIMPLE_LAIDOUT_BLOCKS	.\textBlock.h	20;"	d
SJIS	.\charEncoding.h	/^		SJIS,$/;"	e	enum:CharEncoding::__anon1
StartOfBlock	.\textCursor.h	/^		StartOfBlock,$/;"	e	enum:DocCursor::__anon2
StartOfDocument	.\textCursor.h	/^		StartOfDocument,$/;"	e	enum:DocCursor::__anon2
StartOfWord	.\textCursor.h	/^		StartOfWord,$/;"	e	enum:DocCursor::__anon2
TEXTDOCUMENT_H	.\TextDocument.h	24;"	d
TEXT_CURSOR_BLOCK	.\textCursor.h	19;"	d
TextDocument	.\TextDocument.cpp	/^TextDocument::TextDocument(QObject *parent)$/;"	f	class:TextDocument
TextDocument	.\TextDocument.h	/^class TextDocument : public QObject$/;"	c
TextView	.\TextView.cpp	/^TextView::TextView(QWidget *parent)$/;"	f	class:TextView
TextView	.\TextView.h	/^class TextView : public QAbstractScrollArea$/;"	c
UI_MAINWINDOW_H	.\GeneratedFiles\ui_mainwindow.h	11;"	d
UNKNOWN	.\charEncoding.h	/^		UNKNOWN = 0,$/;"	e	enum:CharEncoding::__anon1
UTF16BE_BOM	.\charEncoding.cpp	/^uchar	UTF16BE_BOM[UTF16_BOM_LENGTH] = {0xfe, 0xff};$/;"	v
UTF16LE_BOM	.\charEncoding.cpp	/^uchar	UTF16LE_BOM[UTF16_BOM_LENGTH] = {0xff, 0xfe};$/;"	v
UTF16_BE	.\charEncoding.h	/^		UTF16_BE,$/;"	e	enum:CharEncoding::__anon1
UTF16_BOM_LENGTH	.\charEncoding.h	34;"	d
UTF16_LE	.\charEncoding.h	/^		UTF16_LE,$/;"	e	enum:CharEncoding::__anon1
UTF8	.\charEncoding.h	/^		UTF8,$/;"	e	enum:CharEncoding::__anon1
UTF8CharSize	.\textCursor.cpp	/^size_t UTF8CharSize(uchar ch)$/;"	f
UTF8_BOM	.\charEncoding.cpp	/^uchar	UTF8_BOM[UTF8_BOM_LENGTH] = {0xef, 0xbb, 0xbf};$/;"	v
UTF8_BOM_LENGTH	.\charEncoding.h	33;"	d
Ui	.\GeneratedFiles\ui_mainwindow.h	/^namespace Ui {$/;"	n
Ui_MainWindowClass	.\GeneratedFiles\ui_mainwindow.h	/^class Ui_MainWindowClass$/;"	c
Up	.\textCursor.h	/^		Up,$/;"	e	enum:DocCursor::__anon2
VERSION_STR	.\mainwindow.cpp	37;"	d	file:
VIENGINE_H	.\ViEngine.h	26;"	d
ViEngine	.\ViEngine.cpp	/^ViEngine::ViEngine(QObject *parent)$/;"	f	class:ViEngine
ViEngine	.\ViEngine.h	/^class ViEngine : public QObject$/;"	c
ViewBlock	.\textBlock.cpp	/^ViewBlock::ViewBlock(TextView *view, const DocBlock &block, BlockData d)$/;"	f	class:ViewBlock
ViewBlock	.\textBlock.h	/^class ViewBlock : public DocBlock$/;"	c
ViewCursor	.\textCursor.cpp	/^ViewCursor::ViewCursor(TextView *view, const DocCursor &x)$/;"	f	class:ViewCursor
ViewCursor	.\textCursor.cpp	/^ViewCursor::ViewCursor(TextView *view, index_t position)$/;"	f	class:ViewCursor
ViewCursor	.\textCursor.cpp	/^ViewCursor::ViewCursor(TextView *view, index_t position, index_t anchor)$/;"	f	class:ViewCursor
ViewCursor	.\textCursor.cpp	/^ViewCursor::ViewCursor(TextView *view, index_t position, index_t anchor,$/;"	f	class:ViewCursor
ViewCursor	.\textCursor.cpp	/^ViewCursor::ViewCursor(const ViewCursor &x)$/;"	f	class:ViewCursor
ViewCursor	.\textCursor.h	/^class ViewCursor : public DocCursor$/;"	c
ViewLine	.\TextView.h	/^	ViewLine(index_t position, index_t blockIndex)$/;"	f	struct:ViewLine
ViewLine	.\TextView.h	/^struct ViewLine$/;"	s
ViewTextBlockItem	.\textCursor.h	/^	ViewTextBlockItem(size_t size = 0) : m_size(size) {}$/;"	f	struct:ViewTextBlockItem
ViewTextBlockItem	.\textCursor.h	/^struct ViewTextBlockItem$/;"	s
_Destroy	.\gap_vector.h	/^	void _Destroy(pointer first, pointer last) { _Destroy_range(first, last, *_pAllocator); }$/;"	f	class:std::gap_vector
_Destroy	.\gap_vector.h	/^	void _Destroy(pointer first, pointer last) { _Destroy_range(first, last, _allocator); }$/;"	f	class:std::gap_vector
_Destroy	.\gap_vector.h	/^	void _Destroy(pointer first, pointer last)$/;"	f	class:std::gap_vector
_Gap_Vector_Const_Iterator	.\gap_vector.h	/^	_Gap_Vector_Const_Iterator() : m_ptr(0), m_gapBegin(0), m_gapEnd(0) {}$/;"	f	class:std::_Gap_Vector_Const_Iterator
_Gap_Vector_Const_Iterator	.\gap_vector.h	/^	_Gap_Vector_Const_Iterator(const _Gap_Vector_Const_Iterator &x)$/;"	f	class:std::_Gap_Vector_Const_Iterator
_Gap_Vector_Const_Iterator	.\gap_vector.h	/^	_Gap_Vector_Const_Iterator(const _Gap_Vector_Iterator<Type, _A> &x)			\/\/	非コンスト → コンスト変換$/;"	f	class:std::_Gap_Vector_Const_Iterator
_Gap_Vector_Const_Iterator	.\gap_vector.h	/^	_Gap_Vector_Const_Iterator(const_pointer ptr, const_pointer gapBegin, const_pointer gapEnd)$/;"	f	class:std::_Gap_Vector_Const_Iterator
_Gap_Vector_Const_Iterator	.\gap_vector.h	/^class _Gap_Vector_Const_Iterator \/\/: public std::iterator<std::random_access_iterator_tag, Type>$/;"	c	namespace:std
_Gap_Vector_Iterator	.\gap_vector.h	/^	_Gap_Vector_Iterator() : m_ptr(0), m_gapBegin(0), m_gapEnd(0) {}$/;"	f	class:std::_Gap_Vector_Iterator
_Gap_Vector_Iterator	.\gap_vector.h	/^	_Gap_Vector_Iterator(const _Gap_Vector_Iterator &x)$/;"	f	class:std::_Gap_Vector_Iterator
_Gap_Vector_Iterator	.\gap_vector.h	/^	_Gap_Vector_Iterator(pointer ptr, pointer gapBegin, pointer gapEnd)$/;"	f	class:std::_Gap_Vector_Iterator
_Gap_Vector_Iterator	.\gap_vector.h	/^class _Gap_Vector_Iterator \/\/: public std::iterator<std::random_access_iterator_tag, Type>$/;"	c	namespace:std
_HEADER_CHARENCODING_H	.\charEncoding.h	26;"	d
_HEADER_FINDOPT_H	.\findOpt.h	13;"	d
_HEADER_TESTBLOCK_H	.\textBlock.h	13;"	d
_HEADER_TEXTCURSOR_H	.\textCursor.h	13;"	d
_allocator	.\gap_vector.h	/^	Allocator	_allocator;		\/\/	メモリアロケータ$/;"	m	class:std::gap_vector
_pAllocator	.\gap_vector.h	/^	static Allocator	*_pAllocator;		\/\/	メモリアロケータ$/;"	m	class:std::gap_vector
_pAllocator	.\gap_vector.h	/^template<typename Type, class _A> _A *gap_vector<Type, _A>::_pAllocator = NULL;$/;"	m	class:std::gap_vector
_test	.\unit_test.cpp	/^void CUnitTest::_test(bool b, cchar *fileName, int lineNum)$/;"	f	class:CUnitTest
_test_equal	.\unit_test.h	/^	void _test_equal(cchar *exp, cchar *v, cchar *fileName, int lineNum)$/;"	f	class:CUnitTest
_test_equal	.\unit_test.h	/^	void _test_equal(const QString &exp, const QString &v, cchar *fileName, int lineNum)$/;"	f	class:CUnitTest
_test_equal	.\unit_test.h	/^	void _test_equal(const T &exp, const T &v, cchar *fileName, int lineNum)$/;"	f	class:CUnitTest
_test_equal	.\unit_test.h	/^	void _test_equal(int exp, int v, cchar *fileName = __FILE__, int lineNum = __LINE__)$/;"	f	class:CUnitTest
aboutAct	.\mainwindow.h	/^    QAction *aboutAct;$/;"	m	class:MainWindow
addFindStringHist	.\FindDlg.cpp	/^void addFindStringHist(\/*ushort opt,*\/ const QString &text)$/;"	f
addStringToHist	.\FindDlg.cpp	/^void addStringToHist(const QString &key, const QString &text)$/;"	f
addToHeap	.\TextDocument.h	/^	index_t	addToHeap(InputIterator first, InputIterator last)$/;"	f	class:GVUndoMgr
addToMultiCursor	.\TextView.cpp	/^void TextView::addToMultiCursor()$/;"	f	class:TextView
addToMultiCursor	.\TextView.h	/^	void	addToMultiCursor(const ViewCursor &cur) { m_multiCursor.push_back(cur); };$/;"	f	class:TextView
addToRedoHeap	.\TextDocument.h	/^	index_t	addToRedoHeap(InputIterator first, InputIterator last)$/;"	f	class:GVUndoMgr
advance	.\gap_vector.h	/^	void	advance(int n)$/;"	f	class:std::_Gap_Vector_Const_Iterator
advance	.\gap_vector.h	/^	void	advance(int n)$/;"	f	class:std::_Gap_Vector_Iterator
ancBlockIndex	.\textCursor.h	/^	index_t	ancBlockIndex() const { return m_anchorBlockData.m_index; }$/;"	f	class:DocCursor
ancBlockPosition	.\textCursor.h	/^	index_t	ancBlockPosition() const { return m_anchorBlockData.m_position; }$/;"	f	class:DocCursor
anchor	.\textCursor.h	/^	index_t	anchor() const { return m_anchor; }$/;"	f	class:DocCursor
anchorBlockData	.\textCursor.h	/^	BlockData anchorBlockData() const { return m_anchorBlockData; }$/;"	f	class:DocCursor
assert_valid	.\gap_vector.h	/^	void assert_valid() const$/;"	f	class:std::gap_vector
assert_valid	.\gap_vector.h	/^	void assert_valid(const Iterator &itr) const$/;"	f	class:std::gap_vector
assign	.\gap_vector.h	/^	void assign(InputIterator first, InputIterator last)$/;"	f	class:std::gap_vector
assign	.\gap_vector.h	/^	void assign(value_type *first, value_type *last)$/;"	f	class:std::gap_vector
at	.\TextDocument.h	/^	uchar	at(index_t ix) const { return m_buffer[ix]; }$/;"	f	class:TextDocument
atBlockEnd	.\textCursor.cpp	/^bool DocCursor::atBlockEnd() const$/;"	f	class:DocCursor
atEnd	.\textCursor.cpp	/^bool DocCursor::atEnd() const$/;"	f	class:DocCursor
begin	.\TextDocument.h	/^	std::gap_vector<uchar>::iterator	begin() { return m_buffer.begin(); }$/;"	f	class:TextDocument
begin	.\textBlock.cpp	/^LaidoutBlock LaidoutBlocksMgr::begin() const$/;"	f	class:LaidoutBlocksMgr
begin	.\gap_vector.h	/^	const_iterator begin() const { return const_iterator(m_first != m_gapBegin ? m_first : m_gapEnd, \/*m_first,*\/ m_gapBegin, m_gapEnd \/*, m_last*\/); }$/;"	f	class:std::gap_vector
begin	.\gap_vector.h	/^	iterator begin() { return iterator(m_first != m_gapBegin ? m_first : m_gapEnd, m_gapBegin, m_gapEnd); }$/;"	f	class:std::gap_vector
benchmarkAct	.\mainwindow.h	/^    QAction	*benchmarkAct;$/;"	m	class:MainWindow
benchmarkReplaceAct	.\mainwindow.h	/^    QAction	*benchmarkReplaceAct;$/;"	m	class:MainWindow
block	.\textCursor.cpp	/^DocBlock DocCursor::block() const$/;"	f	class:DocCursor
block	.\textCursor.cpp	/^ViewBlock ViewCursor::block() const$/;"	f	class:ViewCursor
blockCount	.\TextView.cpp	/^size_t TextView::blockCount() const$/;"	f	class:TextView
blockCount	.\TextDocument.h	/^	size_t	blockCount() const { return m_blocks.size(); }$/;"	f	class:TextDocument
blockCount	.\textBlock.h	/^	size_t	blockCount() const { return size(); }$/;"	f	class:LaidoutBlocksMgr
blockCountChanged	.\GeneratedFiles\Debug\moc_TextDocument.cpp	/^void TextDocument::blockCountChanged()$/;"	f	class:TextDocument
blockCountChanged	.\GeneratedFiles\Release\moc_TextDocument.cpp	/^void TextDocument::blockCountChanged()$/;"	f	class:TextDocument
blockData	.\textCursor.h	/^	BlockData blockData() const { return m_blockData; }$/;"	f	class:DocCursor
blockIndex	.\textCursor.h	/^	index_t	blockIndex() const { return m_blockData.m_index; }$/;"	f	class:DocCursor
blockNumber	.\textCursor.h	/^	index_t	blockNumber() const { return m_blockData.m_index; }$/;"	f	class:DocCursor
blockNumber	.\textBlock.h	/^	index_t		blockNumber() const { return m_data.m_index; }$/;"	f	class:DocBlock
blockNumber	.\textBlock.h	/^	index_t		blockNumber() const { return m_viewBlock.m_index; }$/;"	f	class:ViewBlock
blockNumber	.\textBlock.h	/^	index_t	blockNumber() const { return m_viewBlockData.m_index; }$/;"	f	class:LaidoutBlock
blockNumberFromDocBlockNumber	.\textBlock.cpp	/^size_t LaidoutBlocksMgr::blockNumberFromDocBlockNumber(index_t number) const$/;"	f	class:LaidoutBlocksMgr
blockPosition	.\TextDocument.cpp	/^size_t TextDocument::blockPosition(index_t ix) const$/;"	f	class:TextDocument
blockPosition	.\textCursor.h	/^	index_t	blockPosition() const { return m_blockData.m_position; }$/;"	f	class:DocCursor
blockSize	.\TextView.cpp	/^size_t TextView::blockSize(index_t ix) const	\/\/	ix はビュー行番号（0..*）$/;"	f	class:TextView
blockSize	.\TextDocument.cpp	/^size_t TextDocument::blockSize(index_t ix) const$/;"	f	class:TextDocument
blockSize	.\textBlock.h	/^	size_t	blockSize(index_t ix) const { return viewBlockSize(ix); }$/;"	f	class:LaidoutBlocksMgr
blockSizeSize	.\textBlock.h	/^	size_t	blockSizeSize() const { return m_blockSize.size(); }$/;"	f	class:LaidoutBlocksMgr
buildBlocks	.\TextView.cpp	/^void TextView::buildBlocks(ViewBlock block, int ht,$/;"	f	class:TextView
buildBlocks	.\TextView.h	/^	void	buildBlocks() { buildBlocks(firstBlock(), 0, 0); }$/;"	f	class:TextView
buildBlocks	.\TextDocument.cpp	/^void TextDocument::buildBlocks()$/;"	f	class:TextDocument
buildBlocksUntillDocBlockNumber	.\textBlock.cpp	/^void LaidoutBlocksMgr::buildBlocksUntillDocBlockNumber(TextView *view,$/;"	f	class:LaidoutBlocksMgr
cacheBlock	.\textBlock.h	/^	const LaidoutBlock	*cacheBlock() const { return m_cacheBlock; }$/;"	f	class:LaidoutBlocksMgr
cacheBlockData	.\TextView.h	/^	BlockData cacheBlockData() const { return m_cacheBlockData; }$/;"	f	class:TextView
cacheBlockData	.\TextDocument.h	/^	BlockData cacheBlockData() const { return m_cacheBlockData; }$/;"	f	class:TextDocument
canRedo	.\TextDocument.h	/^	bool	canRedo() const { return m_current < m_items.size(); };$/;"	f	class:GVUndoMgr
canRedo	.\TextDocument.h	/^	bool	canRedo() const { return m_undoMgr.canRedo(); };$/;"	f	class:TextDocument
canUndo	.\TextDocument.h	/^	bool	canUndo() const { return m_current != 0; };$/;"	f	class:GVUndoMgr
canUndo	.\TextDocument.h	/^	bool	canUndo() const { return m_undoMgr.canUndo(); };$/;"	f	class:TextDocument
capacity	.\gap_vector.h	/^	size_type	capacity() const { return \/*!m_first ? 0 :*\/ m_last - m_first; }$/;"	f	class:std::gap_vector
cbegin	.\gap_vector.h	/^	const_iterator cbegin() const { return const_iterator(m_first != m_gapBegin ? m_first : m_gapEnd, \/*m_first,*\/ m_gapBegin, m_gapEnd \/*, m_last*\/); }$/;"	f	class:std::gap_vector
cchar	.\charEncoding.h	/^typedef const char cchar;$/;"	t
cchar	.\unit_test.h	/^typedef const char cchar;$/;"	t
cend	.\gap_vector.h	/^	const_iterator cend() const { return const_iterator(m_last, \/*m_first,*\/ m_gapBegin, m_gapEnd \/*, m_last*\/); }$/;"	f	class:std::gap_vector
centralWidget	.\GeneratedFiles\ui_mainwindow.h	/^    QWidget *centralWidget;$/;"	m	class:Ui_MainWindowClass
charAt	.\TextDocument.cpp	/^QChar TextDocument::charAt(index_t ix) const$/;"	f	class:TextDocument
charCountToX	.\TextView.cpp	/^int TextView::charCountToX(const QString &text, int offset) const$/;"	f	class:TextView
charEncoding	.\TextView.cpp	/^uchar TextView::charEncoding() const$/;"	f	class:TextView
charEncoding	.\TextDocument.h	/^	uchar	charEncoding() const { return m_charEncoding; }$/;"	f	class:TextDocument
charsCount	.\textBlock.cpp	/^int DocBlock::charsCount(index_t position) const$/;"	f	class:DocBlock
charsCount	.\textBlock.cpp	/^int ViewBlock::charsCount(index_t pos) const$/;"	f	class:ViewBlock
checkCharEncoding	.\charEncoding.cpp	/^uchar checkCharEncoding(cuchar *ptr, cuchar *endptr, int &BOMLength)$/;"	f
clear	.\TextView.cpp	/^void TextView::clear()$/;"	f	class:TextView
clear	.\TextDocument.h	/^	void	clear() { init(); }$/;"	f	class:TextDocument
clear	.\textBlock.cpp	/^void LaidoutBlocksMgr::clear()$/;"	f	class:LaidoutBlocksMgr
clear	.\gap_vector.h	/^	void clear()$/;"	f	class:std::gap_vector
clearBlocks	.\TextView.cpp	/^void TextView::clearBlocks()$/;"	f	class:TextView
clearMultiCursor	.\TextView.h	/^	void	clearMultiCursor() { m_multiCursor.clear(); }$/;"	f	class:TextView
clearOutput	.\mainwindow.cpp	/^void MainWindow::clearOutput()$/;"	f	class:MainWindow
clearSelection	.\TextView.h	/^	void	clearSelection() { m_textCursor->clearSelection(); }$/;"	f	class:TextView
clearSelection	.\textCursor.h	/^	void	clearSelection() { copyPositionToAnchor(); }$/;"	f	class:DocCursor
closeAllAct	.\mainwindow.h	/^	QAction *closeAllAct;$/;"	m	class:MainWindow
closeAllViews	.\mainwindow.cpp	/^void MainWindow::closeAllViews(bool noSaveDlg)$/;"	f	class:MainWindow
closeEvent	.\mainwindow.cpp	/^void MainWindow::closeEvent(QCloseEvent *event)$/;"	f	class:MainWindow
closeUndoBlock	.\TextDocument.cpp	/^void GVUndoMgr::closeUndoBlock()$/;"	f	class:GVUndoMgr
closeUndoBlock	.\TextDocument.h	/^	void	closeUndoBlock() { m_undoMgr.closeUndoBlock(); }$/;"	f	class:TextDocument
closeView	.\mainwindow.cpp	/^void MainWindow::closeView(TextView *view, bool noSaveDlg)$/;"	f	class:MainWindow
cmdLineCursorPositionChanged	.\mainwindow.cpp	/^void MainWindow::cmdLineCursorPositionChanged(int oldPos, int newPos)$/;"	f	class:MainWindow
cmdLineReturnPressed	.\mainwindow.cpp	/^void MainWindow::cmdLineReturnPressed()$/;"	f	class:MainWindow
cmdLineTextChanged	.\mainwindow.cpp	/^void MainWindow::cmdLineTextChanged(const QString & text)$/;"	f	class:MainWindow
const_iterator	.\gap_vector.h	/^	typedef _Gap_Vector_Const_Iterator<Type, _A> const_iterator;$/;"	t	class:std::gap_vector
const_pointer	.\gap_vector.h	/^	typedef const Type* const_pointer;$/;"	t	class:std::_Gap_Vector_Const_Iterator
const_pointer	.\gap_vector.h	/^	typedef const Type* const_pointer;$/;"	t	class:std::_Gap_Vector_Iterator
const_pointer	.\gap_vector.h	/^	typedef const Type* const_pointer;$/;"	t	class:std::gap_vector
const_reference	.\gap_vector.h	/^	typedef const Type& const_reference;$/;"	t	class:std::gap_vector
contentsChange	.\GeneratedFiles\Debug\moc_TextDocument.cpp	/^void TextDocument::contentsChange(index_t _t1, size_t _t2, size_t _t3)$/;"	f	class:TextDocument
contentsChange	.\GeneratedFiles\Release\moc_TextDocument.cpp	/^void TextDocument::contentsChange(index_t _t1, size_t _t2, size_t _t3)$/;"	f	class:TextDocument
contentsChanged	.\GeneratedFiles\Debug\moc_TextDocument.cpp	/^void TextDocument::contentsChanged()$/;"	f	class:TextDocument
contentsChanged	.\GeneratedFiles\Release\moc_TextDocument.cpp	/^void TextDocument::contentsChanged()$/;"	f	class:TextDocument
copy	.\TextView.cpp	/^void TextView::copy()$/;"	f	class:TextView
copyAct	.\mainwindow.h	/^    QAction *copyAct;$/;"	m	class:MainWindow
copyAnchorToPosition	.\textCursor.cpp	/^void DocCursor::copyAnchorToPosition()$/;"	f	class:DocCursor
copyAnchorToPosition	.\textCursor.cpp	/^void ViewCursor::copyAnchorToPosition()$/;"	f	class:ViewCursor
copyPositionToAnchor	.\textCursor.cpp	/^void DocCursor::copyPositionToAnchor()$/;"	f	class:DocCursor
copyPositionToAnchor	.\textCursor.cpp	/^void ViewCursor::copyPositionToAnchor()$/;"	f	class:ViewCursor
copy_data	.\gap_vector.h	/^	OutputItearator copy_data(OutputItearator dst, InputIterator src, InputIterator last)$/;"	f	class:std::gap_vector
createActions	.\mainwindow.cpp	/^void MainWindow::createActions()$/;"	f	class:MainWindow
createDockWindows	.\mainwindow.cpp	/^void MainWindow::createDockWindows()$/;"	f	class:MainWindow
createMenus	.\mainwindow.cpp	/^void MainWindow::createMenus()$/;"	f	class:MainWindow
createToolBars	.\mainwindow.cpp	/^void MainWindow::createToolBars()$/;"	f	class:MainWindow
cuchar	.\TextDocument.h	/^typedef const unsigned char cuchar;$/;"	t
cuchar	.\charEncoding.h	/^typedef const unsigned char cuchar;$/;"	t
cut	.\TextView.cpp	/^void TextView::cut()$/;"	f	class:TextView
cutAct	.\mainwindow.h	/^    QAction *cutAct;$/;"	m	class:MainWindow
d_replace_Abcde_XYZ	.\mainwindowBench.cpp	/^void d_replace_Abcde_XYZ(uint n)$/;"	f
d_replace_XYZ_Abcde	.\mainwindowBench.cpp	/^void d_replace_XYZ_Abcde(uint n)$/;"	f
data	.\textBlock.h	/^	BlockData	data() const { return m_data; }$/;"	f	class:DocBlock
data	.\textBlock.h	/^	BlockData	data() const { return m_viewBlock; }$/;"	f	class:ViewBlock
data	.\gap_vector.h	/^	const_pointer data()$/;"	f	class:std::gap_vector
data_size	.\TextDocument.h	/^	size_t	data_size() const { return m_last - m_first; }$/;"	f	struct:GVUndoItem
data_size2	.\TextDocument.h	/^	size_t	data_size2() const { return m_last2 - m_first; }$/;"	f	struct:GVUndoItem
decrement	.\gap_vector.h	/^	void	decrement() { if( m_ptr == m_gapEnd ) { m_ptr = m_gapBegin; } --m_ptr; }$/;"	f	class:std::_Gap_Vector_Const_Iterator
decrement	.\gap_vector.h	/^	void	decrement() { if( m_ptr == m_gapEnd ) { m_ptr = m_gapBegin; } --m_ptr; }$/;"	f	class:std::_Gap_Vector_Iterator
deleteChar	.\TextView.cpp	/^size_t TextView::deleteChar(ViewCursor &cur)$/;"	f	class:TextView
deleteChar	.\TextView.cpp	/^void TextView::deleteChar()$/;"	f	class:TextView
deleteChar	.\textCursor.cpp	/^void DocCursor::deleteChar()$/;"	f	class:DocCursor
deleteChar	.\textCursor.cpp	/^void ViewCursor::deleteChar()$/;"	f	class:ViewCursor
deleteChar	.\TextDocument.cpp	/^size_t TextDocument::deleteChar(DocCursor &cur)$/;"	f	class:TextDocument
deletePreviousChar	.\TextView.cpp	/^size_t TextView::deletePreviousChar(ViewCursor &cur)$/;"	f	class:TextView
deletePreviousChar	.\TextView.cpp	/^void TextView::deletePreviousChar()$/;"	f	class:TextView
deletePreviousChar	.\textCursor.cpp	/^void DocCursor::deletePreviousChar()$/;"	f	class:DocCursor
deletePreviousChar	.\textCursor.cpp	/^void ViewCursor::deletePreviousChar()$/;"	f	class:ViewCursor
deletePreviousChar	.\TextDocument.cpp	/^size_t TextDocument::deletePreviousChar(DocCursor &cur)$/;"	f	class:TextDocument
dereference	.\gap_vector.h	/^	Type &dereference() const { return *m_ptr; }$/;"	f	class:std::_Gap_Vector_Iterator
dereference	.\gap_vector.h	/^	Type dereference() const { return *m_ptr; }$/;"	f	class:std::_Gap_Vector_Const_Iterator
difference_type	.\gap_vector.h	/^	typedef int difference_type;		\/\/	ギャップが無いとみなした場合のインデックス差$/;"	t	class:std::gap_vector
distance_to	.\gap_vector.h	/^	int		distance_to(const _Gap_Vector_Const_Iterator &x) const$/;"	f	class:std::_Gap_Vector_Const_Iterator
distance_to	.\gap_vector.h	/^	int		distance_to(const _Gap_Vector_Iterator &x) const$/;"	f	class:std::_Gap_Vector_Iterator
doBenchmark	.\mainwindowBench.cpp	/^void MainWindow::doBenchmark()$/;"	f	class:MainWindow
doDelete	.\TextView.cpp	/^void TextView::doDelete(int first, int last)$/;"	f	class:TextView
doDelete	.\ViEngine.cpp	/^void ViEngine::doDelete()$/;"	f	class:ViEngine
doExCommand	.\ViEngine.cpp	/^void ViEngine::doExCommand(const QString &text)$/;"	f	class:ViEngine
doFind	.\ViEngine.cpp	/^void ViEngine::doFind(const QString &regexpText, bool forward)$/;"	f	class:ViEngine
doFind	.\ReplaceDlg.cpp	/^void ReplaceDlg::doFind(bool backward)$/;"	f	class:ReplaceDlg
doFindNext	.\TextView.cpp	/^void TextView::doFindNext(const QString &text, ushort options)$/;"	f	class:TextView
doFindNext	.\ViEngine.cpp	/^bool ViEngine::doFindNext(ViewCursor &cur, int nth, bool revers)$/;"	f	class:ViEngine
doFindNext	.\GeneratedFiles\Debug\moc_FindDlg.cpp	/^void FindDlg::doFindNext(const QString & _t1, ushort _t2)$/;"	f	class:FindDlg
doFindNext	.\GeneratedFiles\Debug\moc_ReplaceDlg.cpp	/^void ReplaceDlg::doFindNext(const QString & _t1, ushort _t2)$/;"	f	class:ReplaceDlg
doFindNext	.\GeneratedFiles\Release\moc_FindDlg.cpp	/^void FindDlg::doFindNext(const QString & _t1, ushort _t2)$/;"	f	class:FindDlg
doFindNext	.\GeneratedFiles\Release\moc_ReplaceDlg.cpp	/^void ReplaceDlg::doFindNext(const QString & _t1, ushort _t2)$/;"	f	class:ReplaceDlg
doJoin	.\ViEngine.cpp	/^void ViEngine::doJoin(int n)$/;"	f	class:ViEngine
doJump	.\TextView.cpp	/^void TextView::doJump(int lineNum)$/;"	f	class:TextView
doJump	.\mainwindow.cpp	/^void MainWindow::doJump(int lineNum)$/;"	f	class:MainWindow
doOpenLine	.\TextView.cpp	/^void TextView::doOpenLine(bool next)$/;"	f	class:TextView
doOutput	.\mainwindow.cpp	/^void MainWindow::doOutput(const QString &text)$/;"	f	class:MainWindow
doPaint	.\TextView.cpp	/^void TextView::doPaint()$/;"	f	class:TextView
doRedo	.\TextView.cpp	/^void TextView::doRedo(int n)$/;"	f	class:TextView
doRedo	.\TextDocument.cpp	/^bool GVUndoMgr::doRedo(TextDocument *bb, index_t& pos, index_t& anchor)$/;"	f	class:GVUndoMgr
doRedo	.\TextDocument.cpp	/^void TextDocument::doRedo(index_t &pos, index_t &anchor)$/;"	f	class:TextDocument
doRedo	.\GeneratedFiles\Debug\moc_ReplaceDlg.cpp	/^void ReplaceDlg::doRedo()$/;"	f	class:ReplaceDlg
doRedo	.\GeneratedFiles\Release\moc_ReplaceDlg.cpp	/^void ReplaceDlg::doRedo()$/;"	f	class:ReplaceDlg
doReplace	.\TextView.cpp	/^void TextView::doReplace(const QString &text)$/;"	f	class:TextView
doReplace	.\GeneratedFiles\Debug\moc_ReplaceDlg.cpp	/^void ReplaceDlg::doReplace(const QString & _t1)$/;"	f	class:ReplaceDlg
doReplace	.\GeneratedFiles\Release\moc_ReplaceDlg.cpp	/^void ReplaceDlg::doReplace(const QString & _t1)$/;"	f	class:ReplaceDlg
doReplaceAll	.\TextView.cpp	/^void TextView::doReplaceAll(const QString &findText, ushort options,$/;"	f	class:TextView
doReplaceAll	.\TextDocument.cpp	/^void TextDocument::doReplaceAll(const QString &findText, ushort options,$/;"	f	class:TextDocument
doReplaceAll	.\GeneratedFiles\Debug\moc_ReplaceDlg.cpp	/^void ReplaceDlg::doReplaceAll(const QString & _t1, ushort _t2, const QString & _t3)$/;"	f	class:ReplaceDlg
doReplaceAll	.\GeneratedFiles\Release\moc_ReplaceDlg.cpp	/^void ReplaceDlg::doReplaceAll(const QString & _t1, ushort _t2, const QString & _t3)$/;"	f	class:ReplaceDlg
doSet	.\ViEngine.cpp	/^void ViEngine::doSet(const QString &key, const QString &value)$/;"	f	class:ViEngine
doSet	.\ViEngine.cpp	/^void ViEngine::doSet(const QString &text)$/;"	f	class:ViEngine
doShiftLeft	.\ViEngine.cpp	/^bool ViEngine::doShiftLeft(ViewCursor &cur, int n)$/;"	f	class:ViEngine
doShiftRight	.\ViEngine.cpp	/^bool ViEngine::doShiftRight(ViewCursor &cur, int n)$/;"	f	class:ViEngine
doSubst	.\ViEngine.cpp	/^void ViEngine::doSubst(const QString &param, int first, int last)$/;"	f	class:ViEngine
doUndo	.\TextView.cpp	/^void TextView::doUndo(int n)$/;"	f	class:TextView
doUndo	.\TextDocument.cpp	/^bool GVUndoMgr::doUndo(TextDocument *bb, index_t& pos, index_t& anchor)$/;"	f	class:GVUndoMgr
doUndo	.\TextDocument.cpp	/^void TextDocument::doUndo(index_t &pos, index_t &anchor)$/;"	f	class:TextDocument
doUndo	.\GeneratedFiles\Debug\moc_ReplaceDlg.cpp	/^void ReplaceDlg::doUndo()$/;"	f	class:ReplaceDlg
doUndo	.\GeneratedFiles\Release\moc_ReplaceDlg.cpp	/^void ReplaceDlg::doUndo()$/;"	f	class:ReplaceDlg
doUnitTest	.\mainwindowTest.cpp	/^void MainWindow::doUnitTest()$/;"	f	class:MainWindow
doVertScroll	.\TextView.cpp	/^void TextView::doVertScroll(int op)$/;"	f	class:TextView
doViCommand	.\ViEngine.cpp	/^bool ViEngine::doViCommand(const QChar &qch)$/;"	f	class:ViEngine
doViCommand	.\ViEngine.cpp	/^void ViEngine::doViCommand(const QString &text)$/;"	f	class:ViEngine
do_erase	.\TextDocument.cpp	/^void TextDocument::do_erase(index_t first, index_t last, ushort flag)$/;"	f	class:TextDocument
do_insert	.\TextDocument.cpp	/^void TextDocument::do_insert(index_t position, const QString &text)$/;"	f	class:TextDocument
do_replace	.\TextDocument.cpp	/^void TextDocument::do_replace(index_t first, index_t last, const QString &text)$/;"	f	class:TextDocument
do_replace35_mv7	.\mainwindowBench.cpp	/^void do_replace35_mv7(uint n)$/;"	f
docAnchorBlock	.\textCursor.cpp	/^DocBlock ViewCursor::docAnchorBlock() const$/;"	f	class:ViewCursor
docAnchorBlockData	.\textCursor.h	/^	BlockData	docAnchorBlockData() const { return DocCursor::anchorBlockData(); }$/;"	f	class:ViewCursor
docBlock	.\TextView.cpp	/^DocBlock TextView::docBlock(BlockData v) const$/;"	f	class:TextView
docBlock	.\textCursor.h	/^	DocBlock	docBlock() const { return DocCursor::block(); }$/;"	f	class:ViewCursor
docBlockCount	.\textBlock.cpp	/^size_t LaidoutBlocksMgr::docBlockCount() const$/;"	f	class:LaidoutBlocksMgr
docBlockCount	.\textBlock.h	/^	size_t	docBlockCount() const$/;"	f	struct:LaidoutChunk
docBlockData	.\TextView.cpp	/^BlockData TextView::docBlockData(BlockData v) const$/;"	f	class:TextView
docBlockData	.\textCursor.h	/^	BlockData	docBlockData() const { return DocCursor::blockData(); }$/;"	f	class:ViewCursor
docBlockData	.\textBlock.h	/^	BlockData	docBlockData() const { return BlockData(docBlockNumber(), docPosition()); }$/;"	f	class:LaidoutBlock
docBlockNumber	.\textBlock.h	/^	index_t		docBlockNumber() const { return DocBlock::blockNumber(); }$/;"	f	class:ViewBlock
docBlockNumber	.\textBlock.h	/^	index_t	docBlockNumber() const { return m_docBlockData.m_index; }$/;"	f	class:LaidoutBlock
docBlockNumberFromBlockNumber	.\textBlock.cpp	/^size_t LaidoutBlocksMgr::docBlockNumberFromBlockNumber(index_t number) const$/;"	f	class:LaidoutBlocksMgr
docIndex	.\textBlock.h	/^	index_t		docIndex() const { return DocBlock::index(); }$/;"	f	class:ViewBlock
docIndex	.\textBlock.h	/^	index_t	docIndex() const { return m_docBlockData.m_index; }$/;"	f	class:LaidoutBlock
docPosition	.\textBlock.h	/^	index_t		docPosition() const { return DocBlock::position(); };$/;"	f	class:ViewBlock
docPosition	.\textBlock.h	/^	index_t	docPosition() const { return m_docBlockData.m_position; }$/;"	f	class:LaidoutBlock
document	.\TextView.h	/^	TextDocument	*document() { return m_document; }$/;"	f	class:TextView
document	.\TextView.h	/^	const TextDocument	*document() const { return m_document; }$/;"	f	class:TextView
document	.\ViEngine.cpp	/^TextDocument *ViEngine::document()$/;"	f	class:ViEngine
document	.\textCursor.h	/^	TextDocument	*document() { return m_document; }$/;"	f	class:DocCursor
document	.\textCursor.h	/^	const TextDocument	*document() const { return m_document; }$/;"	f	class:DocCursor
document	.\textBlock.h	/^	TextDocument	*document() { return m_document; }$/;"	f	class:LaidoutBlocksMgr
document	.\textBlock.h	/^	TextDocument	*document() { return m_lbMgr->m_document; }$/;"	f	class:LaidoutBlock
document	.\textBlock.h	/^	const TextDocument	*document() const { return m_document; }$/;"	f	class:DocBlock
document	.\textBlock.h	/^	const TextDocument	*document() const { return m_document; }$/;"	f	class:LaidoutBlocksMgr
documentWasModified	.\mainwindow.cpp	/^void MainWindow::documentWasModified()$/;"	f	class:MainWindow
drawCursor	.\TextView.cpp	/^void TextView::drawCursor(QPainter &painter,$/;"	f	class:TextView
drawLineNumbers	.\TextView.cpp	/^void TextView::drawLineNumbers()$/;"	f	class:TextView
drawNewline	.\TextView.cpp	/^void TextView::drawNewline(QPainter &painter, int x, int y, const QString &, int ix)$/;"	f	class:TextView
editMenu	.\mainwindow.h	/^    QMenu	*editMenu;$/;"	m	class:MainWindow
editor	.\ViEngine.h	/^	TextView *editor() { return m_editor; }$/;"	f	class:ViEngine
empty	.\gap_vector.h	/^	bool	empty() const { return !m_first || (m_first == m_gapBegin && m_gapEnd == m_last); }$/;"	f	class:std::gap_vector
end	.\TextDocument.h	/^	std::gap_vector<uchar>::iterator	end() { return m_buffer.end(); }$/;"	f	class:TextDocument
end	.\textBlock.cpp	/^LaidoutBlock LaidoutBlocksMgr::end() const$/;"	f	class:LaidoutBlocksMgr
end	.\gap_vector.h	/^	const_iterator end() const { return const_iterator(m_last, \/*m_first,*\/ m_gapBegin, m_gapEnd \/*, m_last*\/); }$/;"	f	class:std::gap_vector
end	.\gap_vector.h	/^	iterator end() { return iterator(m_last, m_gapBegin, m_gapEnd); }$/;"	f	class:std::gap_vector
ensureBlockLayout	.\TextView.cpp	/^void TextView::ensureBlockLayout()$/;"	f	class:TextView
ensureCursorVisible	.\TextView.cpp	/^void TextView::ensureCursorVisible()$/;"	f	class:TextView
equal	.\gap_vector.h	/^	bool	equal(const _Gap_Vector_Const_Iterator &rhs) const { return m_ptr == rhs.m_ptr; }$/;"	f	class:std::_Gap_Vector_Const_Iterator
equal	.\gap_vector.h	/^	bool	equal(const _Gap_Vector_Iterator &rhs) const { return m_ptr == rhs.m_ptr; }$/;"	f	class:std::_Gap_Vector_Iterator
erase	.\TextDocument.cpp	/^void TextDocument::erase(index_t first, BlockData d, index_t last)$/;"	f	class:TextDocument
erase	.\TextDocument.cpp	/^void TextDocument::erase(index_t first, index_t last)$/;"	f	class:TextDocument
erase	.\textBlock.h	/^	void	erase(index_t first, index_t last, size_t delDocBlockCount)$/;"	f	class:LaidoutBlocksMgr
erase	.\gap_vector.h	/^	iterator erase(const iterator &first, const iterator &last)$/;"	f	class:std::gap_vector
erase	.\gap_vector.h	/^	iterator erase(const iterator &itr)$/;"	f	class:std::gap_vector
erase	.\gap_vector.h	/^	void erase(index_type first, index_type last)$/;"	f	class:std::gap_vector
erase	.\gap_vector.h	/^	void erase(index_type ix)$/;"	f	class:std::gap_vector
eraseBlocks	.\TextView.cpp	/^void TextView::eraseBlocks(index_t first, index_t last, size_t delDocBlockCount)$/;"	f	class:TextView
event	.\TextView.cpp	/^bool TextView::event ( QEvent * event )$/;"	f	class:TextView
eventFilter	.\TextView.cpp	/^bool TextView::eventFilter(QObject *obj, QEvent *event)$/;"	f	class:TextView
eventFilter	.\mainwindow.cpp	/^bool MainWindow::eventFilter(QObject *obj, QEvent *event)$/;"	f	class:MainWindow
eventFilter	.\ViEngine.cpp	/^bool ViEngine::eventFilter(QObject *obj, QEvent *event)$/;"	f	class:ViEngine
exCommands	.\ViEngine.h	/^	const QStringList &exCommands() const { return m_exCommands; }$/;"	f	class:ViEngine
expand_buffer	.\gap_vector.h	/^	void expand_buffer()$/;"	f	class:std::gap_vector
fileMenu	.\mainwindow.h	/^    QMenu	*fileMenu;$/;"	m	class:MainWindow
find	.\TextView.cpp	/^void TextView::find()$/;"	f	class:TextView
find	.\TextDocument.cpp	/^DocCursor TextDocument::find(const QByteArray &ba, index_t position, ushort options)$/;"	f	class:TextDocument
find	.\TextDocument.cpp	/^DocCursor TextDocument::find(const QString &text, const DocCursor &cur, ushort options)$/;"	f	class:TextDocument
find	.\TextDocument.cpp	/^DocCursor TextDocument::find(const QString &text, index_t position, ushort options)$/;"	f	class:TextDocument
findAct	.\mainwindow.h	/^    QAction *findAct;$/;"	m	class:MainWindow
findBlock	.\TextView.cpp	/^ViewBlock TextView::findBlock(index_t position) const$/;"	f	class:TextView
findBlock	.\TextDocument.cpp	/^DocBlock TextDocument::findBlock(index_t position) const$/;"	f	class:TextDocument
findBlock	.\textBlock.cpp	/^LaidoutBlock LaidoutBlocksMgr::findBlock(index_t pos) const$/;"	f	class:LaidoutBlocksMgr
findBlockByDocNumber	.\textBlock.cpp	/^LaidoutBlock LaidoutBlocksMgr::findBlockByDocNumber(index_t number) const$/;"	f	class:LaidoutBlocksMgr
findBlockByNumber	.\TextView.cpp	/^ViewBlock TextView::findBlockByNumber(index_t bn) const$/;"	f	class:TextView
findBlockByNumber	.\TextDocument.cpp	/^DocBlock TextDocument::findBlockByNumber(index_t blockIndex) const$/;"	f	class:TextDocument
findBlockByNumber	.\textBlock.cpp	/^LaidoutBlock LaidoutBlocksMgr::findBlockByNumber(index_t number) const$/;"	f	class:LaidoutBlocksMgr
findBlockByNumberRaw	.\TextDocument.cpp	/^DocBlock TextDocument::findBlockByNumberRaw(index_t blockIndex) const$/;"	f	class:TextDocument
findBlockData	.\TextView.cpp	/^BlockData TextView::findBlockData(index_t position) const$/;"	f	class:TextView
findBlockData	.\TextDocument.cpp	/^BlockData TextDocument::findBlockData(index_t position) const$/;"	f	class:TextDocument
findBlockIndex	.\TextDocument.cpp	/^index_t	TextDocument::findBlockIndex(index_t position, index_t *pBlockPos) const$/;"	f	class:TextDocument
findCommand	.\mainwindow.cpp	/^QString MainWindow::findCommand(const QStringList cmds, const QString text, bool up)$/;"	f	class:MainWindow
findCurWord	.\TextView.cpp	/^void TextView::findCurWord()$/;"	f	class:TextView
findCurWordAct	.\mainwindow.h	/^    QAction *findCurWordAct;	\/\/	カーソル位置単語検索$/;"	m	class:MainWindow
findMainWindow	.\mainwindow.cpp	/^MainWindow *MainWindow::findMainWindow(const QString &fileName)$/;"	f	class:MainWindow
findNext	.\TextView.cpp	/^void TextView::findNext()$/;"	f	class:TextView
findNextAct	.\mainwindow.h	/^    QAction *findNextAct;$/;"	m	class:MainWindow
findPrev	.\TextView.cpp	/^void TextView::findPrev()$/;"	f	class:TextView
findPrevAct	.\mainwindow.h	/^    QAction *findPrevAct;$/;"	m	class:MainWindow
findStrings	.\mainwindow.cpp	/^QStringList MainWindow::findStrings() const$/;"	f	class:MainWindow
firstBlock	.\TextView.cpp	/^ViewBlock TextView::firstBlock() const$/;"	f	class:TextView
firstBlock	.\TextDocument.h	/^	DocBlock	firstBlock() { return DocBlock(this, 0); }$/;"	f	class:TextDocument
firstBlock	.\TextDocument.h	/^	DocBlock	firstBlock() { return DocBlock(this, 0, 0); }$/;"	f	class:TextDocument
firstNonBlankCharPos	.\viCursor.cpp	/^int firstNonBlankCharPos(const QString &text)$/;"	f
firstPosition	.\textCursor.h	/^	index_t firstPosition() const { return qMin(position(), anchor()); }$/;"	f	class:DocCursor
firstUnlayoutedBlockCount	.\TextView.h	/^	size_t	firstUnlayoutedBlockCount() const { return m_firstUnlayoutedBlockCount; }$/;"	f	class:TextView
firstVisibleBlock	.\TextView.cpp	/^ViewBlock TextView::firstVisibleBlock() const$/;"	f	class:TextView
firstVisibleBlockPtr	.\TextView.cpp	/^const ViewBlock *TextView::firstVisibleBlockPtr() const$/;"	f	class:TextView
focusInEvent	.\TextView.cpp	/^void TextView::focusInEvent ( QFocusEvent * event )$/;"	f	class:TextView
font	.\mainwindow.cpp	/^void MainWindow::font()$/;"	f	class:MainWindow
fontAct	.\mainwindow.h	/^    QAction *fontAct;			\/\/	暫定的$/;"	m	class:MainWindow
fullPath	.\TextDocument.h	/^	const QString fullPath() const { return m_fullPath; }$/;"	f	class:TextDocument
g_total_fail_count	.\unit_test.cpp	/^uint g_total_fail_count = 0;$/;"	v
g_total_test_count	.\unit_test.cpp	/^uint g_total_test_count = 0;$/;"	v
g_ut_output	.\unit_test.cpp	/^OutputFunc g_ut_output = &ut_output;$/;"	v
gap_vector	.\gap_vector.h	/^	gap_vector() : m_first(0), m_gapBegin(0), m_gapEnd(0), m_last(0)$/;"	f	class:std::gap_vector
gap_vector	.\gap_vector.h	/^	gap_vector(const gap_vector &x) : m_first(0), m_gapBegin(0), m_gapEnd(0), m_last(0)$/;"	f	class:std::gap_vector
gap_vector	.\gap_vector.h	/^	gap_vector(size_type n, value_type v = Type())$/;"	f	class:std::gap_vector
gap_vector	.\gap_vector.h	/^class gap_vector$/;"	c	namespace:std
get	.\gap_vector.h	/^	const_pointer get() const { return (const_pointer)m_ptr; }$/;"	f	class:std::_Gap_Vector_Iterator
get	.\gap_vector.h	/^	const_pointer get() const { return m_ptr; }$/;"	f	class:std::_Gap_Vector_Const_Iterator
get	.\gap_vector.h	/^	pointer get() { return m_ptr; }$/;"	f	class:std::_Gap_Vector_Iterator
getAddSubTerm	.\ViEngine.cpp	/^bool ViEngine::getAddSubTerm(const QString &text, int &ix, int &value)$/;"	f	class:ViEngine
getAllCursor	.\TextView.cpp	/^void TextView::getAllCursor(std::vector<ViewCursor*> &v)$/;"	f	class:TextView
getCharType	.\textCursor.cpp	/^uchar getCharType(QChar ch)$/;"	f
getEOLOffset	.\textCursor.cpp	/^int getEOLOffset(const QString text)$/;"	f
getEOLOffset	.\textCursor.cpp	/^size_t getEOLOffset(const TextDocument *doc, BlockData d)$/;"	f
getExCommand	.\ViEngine.cpp	/^QString ViEngine::getExCommand(const QString &text, int &ix, bool &exclamation)$/;"	f	class:ViEngine
getLastFindString	.\FindDlg.cpp	/^void getLastFindString(\/*ushort &opt,*\/ QString &text)$/;"	f
getLineNumber	.\ViEngine.cpp	/^bool ViEngine::getLineNumber(const QString &text, int &ix, int &lineNumber)$/;"	f	class:ViEngine
getLineNumbers	.\ViEngine.cpp	/^void ViEngine::getLineNumbers(const QString &text, int &ix)$/;"	f	class:ViEngine
getReLayoutRange	.\TextView.cpp	/^void TextView::getReLayoutRange(ViewCursor cur,$/;"	f	class:TextView
getReLayoutRangeByBlockNumber	.\TextView.cpp	/^void TextView::getReLayoutRangeByBlockNumber($/;"	f	class:TextView
getStaticMetaObject	.\GeneratedFiles\Debug\moc_FindDlg.cpp	/^const QMetaObject &FindDlg::getStaticMetaObject() { return staticMetaObject; }$/;"	f	class:FindDlg
getStaticMetaObject	.\GeneratedFiles\Debug\moc_ReplaceDlg.cpp	/^const QMetaObject &ReplaceDlg::getStaticMetaObject() { return staticMetaObject; }$/;"	f	class:ReplaceDlg
getStaticMetaObject	.\GeneratedFiles\Debug\moc_TextDocument.cpp	/^const QMetaObject &TextDocument::getStaticMetaObject() { return staticMetaObject; }$/;"	f	class:TextDocument
getStaticMetaObject	.\GeneratedFiles\Debug\moc_TextView.cpp	/^const QMetaObject &TextView::getStaticMetaObject() { return staticMetaObject; }$/;"	f	class:TextView
getStaticMetaObject	.\GeneratedFiles\Debug\moc_mainwindow.cpp	/^const QMetaObject &MainWindow::getStaticMetaObject() { return staticMetaObject; }$/;"	f	class:MainWindow
getStaticMetaObject	.\GeneratedFiles\Release\moc_FindDlg.cpp	/^const QMetaObject &FindDlg::getStaticMetaObject() { return staticMetaObject; }$/;"	f	class:FindDlg
getStaticMetaObject	.\GeneratedFiles\Release\moc_ReplaceDlg.cpp	/^const QMetaObject &ReplaceDlg::getStaticMetaObject() { return staticMetaObject; }$/;"	f	class:ReplaceDlg
getStaticMetaObject	.\GeneratedFiles\Release\moc_TextDocument.cpp	/^const QMetaObject &TextDocument::getStaticMetaObject() { return staticMetaObject; }$/;"	f	class:TextDocument
getStaticMetaObject	.\GeneratedFiles\Release\moc_TextView.cpp	/^const QMetaObject &TextView::getStaticMetaObject() { return staticMetaObject; }$/;"	f	class:TextView
getStaticMetaObject	.\GeneratedFiles\Release\moc_mainwindow.cpp	/^const QMetaObject &MainWindow::getStaticMetaObject() { return staticMetaObject; }$/;"	f	class:MainWindow
getStringFromHist	.\FindDlg.cpp	/^void getStringFromHist(const QString &key, QString &text)$/;"	f
get_first	.\gap_vector.h	/^	const_pointer get_first() const { return m_first; }$/;"	f	class:std::gap_vector
get_gapBegin	.\gap_vector.h	/^	const_pointer get_gapBegin() const { return m_gapBegin; }$/;"	f	class:std::gap_vector
get_gapEnd	.\gap_vector.h	/^	const_pointer get_gapEnd() const { return m_gapEnd; }$/;"	f	class:std::gap_vector
get_index	.\gap_vector.h	/^	size_t	get_index(const Iterator &itr) const		\/\/	ギャップが無い場合のインデックスを返す$/;"	f	class:std::gap_vector
get_last	.\gap_vector.h	/^	const_pointer get_last() const { return m_last; }$/;"	f	class:std::gap_vector
get_pointer	.\gap_vector.h	/^	const_pointer	get_pointer(size_type n) const$/;"	f	class:std::gap_vector
get_pointer	.\gap_vector.h	/^	pointer	get_pointer(size_type n)$/;"	f	class:std::gap_vector
get_raw_index_of_gap	.\gap_vector.h	/^	size_t get_raw_index_of_gap() const { return m_gapBegin - m_first; }$/;"	f	class:std::gap_vector
gotoBeginBlock	.\viCursor.cpp	/^bool gotoBeginBlock(ViewCursor &cur, bool forward, int n)$/;"	f
gotoBlankLine	.\viCursor.cpp	/^bool gotoBlankLine(ViewCursor &cur, bool forward, int n)$/;"	f
gotoEndOfWord	.\textCursor.cpp	/^bool gotoEndOfWord(DocCursor &cur)$/;"	f
gotoMatchParen	.\viCursor.cpp	/^bool gotoMatchParen(ViewCursor &cur)$/;"	f
gotoNextBlankLine	.\viCursor.cpp	/^bool gotoNextBlankLine(ViewCursor &cur, int n)$/;"	f
gotoNextSSWord	.\textCursor.cpp	/^bool gotoNextSSWord(DocCursor &cur, int n, bool cdy)$/;"	f
gotoNextSSWordEnd	.\textCursor.cpp	/^bool gotoNextSSWordEnd(DocCursor &cur, int n, bool cdy)$/;"	f
gotoNextWord	.\textCursor.cpp	/^bool gotoNextWord(DocCursor &cur, int n , bool vi, bool cdy)$/;"	f
gotoNextWord	.\viCursor.cpp	/^bool gotoNextWord(ViewCursor &cur, int n, bool cdy)$/;"	f
gotoNextWordEnd	.\textCursor.cpp	/^bool gotoNextWordEnd(DocCursor &cur, int n, bool cdy)$/;"	f
gotoPrevBlankLine	.\viCursor.cpp	/^bool gotoPrevBlankLine(ViewCursor &cur, int n)$/;"	f
gotoPrevSSWord	.\textCursor.cpp	/^bool gotoPrevSSWord(DocCursor &cur, int n)$/;"	f
gotoPrevWord	.\textCursor.cpp	/^bool gotoPrevWord(DocCursor &cur, int n, bool vi)$/;"	f
gotoPrevWord	.\viCursor.cpp	/^bool gotoPrevWord(ViewCursor &cur, int n)$/;"	f
gotoStartOfWord	.\textCursor.cpp	/^bool gotoStartOfWord(DocCursor &cur)$/;"	f
hasMultiCursor	.\TextView.h	/^	bool	hasMultiCursor() const { return !m_multiCursor.empty(); }$/;"	f	class:TextView
hasSelection	.\TextView.cpp	/^bool hasSelection(const std::vector<ViewCursor*> &v)$/;"	f
hasSelection	.\textCursor.h	/^	bool	hasSelection() const { return m_position != m_anchor; }$/;"	f	class:DocCursor
increment	.\gap_vector.h	/^	void	increment() { if( ++m_ptr == m_gapBegin ) m_ptr = m_gapEnd; }$/;"	f	class:std::_Gap_Vector_Const_Iterator
increment	.\gap_vector.h	/^	void	increment() { if( ++m_ptr == m_gapBegin ) m_ptr = m_gapEnd; }$/;"	f	class:std::_Gap_Vector_Iterator
index	.\textBlock.h	/^	index_t		index() const { return m_data.m_index; }$/;"	f	class:DocBlock
index	.\textBlock.h	/^	index_t		index() const { return m_viewBlock.m_index; }$/;"	f	class:ViewBlock
index	.\textBlock.h	/^	index_t	index() const { return m_viewBlockData.m_index; }$/;"	f	class:LaidoutBlock
index	.\textBlock.h	/^	index_t index() const { return m_index; }$/;"	f	struct:BlockData
index_t	.\textCursor.h	/^typedef size_t index_t;$/;"	t
index_t	.\textBlock.h	/^typedef size_t index_t;$/;"	t
index_t	.\gap_vector.h	/^typedef size_t index_t;$/;"	t
index_type	.\gap_vector.h	/^	typedef uint index_type;			\/\/	バッファインデックス [0, size()]$/;"	t	class:std::gap_vector
init	.\mainwindow.cpp	/^void MainWindow::init()$/;"	f	class:MainWindow
init	.\TextDocument.cpp	/^void TextDocument::init()$/;"	f	class:TextDocument
inputMethodEvent	.\TextView.cpp	/^void TextView::inputMethodEvent ( QInputMethodEvent * event )$/;"	f	class:TextView
inputMethodQuery	.\TextView.cpp	/^QVariant TextView::inputMethodQuery ( Qt::InputMethodQuery query ) const$/;"	f	class:TextView
insert	.\TextDocument.cpp	/^void TextDocument::insert(index_t ix, BlockData d,$/;"	f	class:TextDocument
insert	.\TextDocument.cpp	/^void TextDocument::insert(index_t ix, cuchar *first, cuchar *last)$/;"	f	class:TextDocument
insert	.\TextDocument.cpp	/^void TextDocument::insert(index_t position, BlockData d, const QString &text)$/;"	f	class:TextDocument
insert	.\TextDocument.cpp	/^void TextDocument::insert(index_t position, const QString &text)$/;"	f	class:TextDocument
insert	.\textBlock.cpp	/^bool LaidoutBlocksMgr::insert(index_t docBlockNumber,		\/\/	挿入位置$/;"	f	class:LaidoutBlocksMgr
insert	.\gap_vector.h	/^	iterator insert(const iterator &itr, InputIterator first, InputIterator last)$/;"	f	class:std::gap_vector
insert	.\gap_vector.h	/^	iterator insert(const iterator &itr, Type ch)$/;"	f	class:std::gap_vector
insert	.\gap_vector.h	/^	iterator insert(size_t ix, InputIterator first, InputIterator last)$/;"	f	class:std::gap_vector
insert	.\gap_vector.h	/^	void insert(index_type ix, Type ch)$/;"	f	class:std::gap_vector
insertText	.\TextView.cpp	/^int TextView::insertText(ViewCursor &cur, const QString &text)$/;"	f	class:TextView
insertText	.\TextView.cpp	/^void TextView::insertText(const QString &text, bool tab)$/;"	f	class:TextView
insertText	.\textCursor.cpp	/^size_t DocCursor::insertText(const QString &text)$/;"	f	class:DocCursor
insertText	.\textCursor.cpp	/^void ViewCursor::insertText(const QString &text)$/;"	f	class:ViewCursor
insertText	.\TextDocument.cpp	/^int TextDocument::insertText(DocCursor &cur, const QString &text,$/;"	f	class:TextDocument
isDBCSLeadByte	.\charEncoding.cpp	/^bool isDBCSLeadByte(uchar ch)$/;"	f
isDBCSSecondByte	.\charEncoding.cpp	/^bool isDBCSSecondByte(uchar ch)$/;"	f
isEUCcode	.\charEncoding.h	/^inline int isEUCcode(uchar uch)$/;"	f
isEmpty	.\TextDocument.h	/^	bool	isEmpty() const { return m_buffer.empty(); }$/;"	f	class:TextDocument
isFirstBlock	.\textBlock.cpp	/^bool ViewBlock::isFirstBlock() const$/;"	f	class:ViewBlock
isHankakuKana	.\charEncoding.h	/^inline bool isHankakuKana(uchar uch)$/;"	f
isLayouted	.\textBlock.cpp	/^bool LaidoutBlock::isLayouted() const$/;"	f	class:LaidoutBlock
isLayouted	.\textBlock.cpp	/^bool ViewBlock::isLayouted() const$/;"	f	class:ViewBlock
isLayoutedDocBlock	.\TextView.cpp	/^bool TextView::isLayoutedDocBlock(index_t ix) const$/;"	f	class:TextView
isLayoutedViewBlock	.\TextView.cpp	/^bool TextView::isLayoutedViewBlock(index_t ix) const$/;"	f	class:TextView
isMatch	.\ViEngine.cpp	/^bool isMatch(const QString &cmdText, const QString &pat)$/;"	f
isMatch	.\TextDocument.cpp	/^bool TextDocument::isMatch(index_t position, cuchar *first, cuchar *last) const$/;"	f	class:TextDocument
isMatch	.\TextDocument.cpp	/^bool TextDocument::isMatch(index_t position, cuchar *first, cuchar *last, ushort options) const$/;"	f	class:TextDocument
isMatchIgnoreCase	.\TextDocument.cpp	/^bool TextDocument::isMatchIgnoreCase(index_t position, cuchar *first, cuchar *last) const$/;"	f	class:TextDocument
isMatched	.\TextView.cpp	/^void TextView::isMatched(bool &b, const QString &text, ushort options)$/;"	f	class:TextView
isMatched	.\TextDocument.cpp	/^bool TextDocument::isMatched(const QString &text, const DocCursor &cur, ushort options)$/;"	f	class:TextDocument
isMatched	.\GeneratedFiles\Debug\moc_ReplaceDlg.cpp	/^void ReplaceDlg::isMatched(bool & _t1, const QString & _t2, ushort _t3)$/;"	f	class:ReplaceDlg
isMatched	.\GeneratedFiles\Release\moc_ReplaceDlg.cpp	/^void ReplaceDlg::isMatched(bool & _t1, const QString & _t2, ushort _t3)$/;"	f	class:ReplaceDlg
isModified	.\TextView.cpp	/^bool TextView::isModified() const$/;"	f	class:TextView
isModified	.\TextDocument.h	/^	bool	isModified() const { return m_modified; }$/;"	f	class:TextDocument
isNull	.\textCursor.h	/^	bool	isNull() const { return m_document == 0; }$/;"	f	class:DocCursor
isOverlapped	.\textCursor.cpp	/^bool DocCursor::isOverlapped(const DocCursor &x) const$/;"	f	class:DocCursor
isTabOrSpace	.\textCursor.cpp	/^inline bool isTabOrSpace(const QChar ch)$/;"	f
isTabOrSpace	.\viCursor.cpp	/^inline bool isTabOrSpace(const QChar ch)$/;"	f
isUTF16beBom	.\charEncoding.cpp	/^inline bool isUTF16beBom(cuchar *ptr, cuchar *endptr)$/;"	f
isUTF16leBom	.\charEncoding.cpp	/^inline bool isUTF16leBom(cuchar *ptr, cuchar *endptr)$/;"	f
isUTF8Bom	.\charEncoding.cpp	/^inline bool isUTF8Bom(cuchar *ptr, cuchar *endptr)$/;"	f
isUTF8FirstChar	.\textCursor.cpp	/^inline bool isUTF8FirstChar(uchar ch)$/;"	f
isUTF8FirstChar	.\TextDocument.cpp	/^static inline bool isUTF8FirstChar(uchar ch)$/;"	f	file:
isValid	.\textBlock.cpp	/^bool DocBlock::isValid() const$/;"	f	class:DocBlock
isValid	.\textBlock.cpp	/^bool LaidoutBlock::isValid() const$/;"	f	class:LaidoutBlock
iterator	.\gap_vector.h	/^	typedef _Gap_Vector_Iterator<Type, _A> iterator;$/;"	t	class:std::gap_vector
keyPressEvent	.\TextView.cpp	/^void TextView::keyPressEvent ( QKeyEvent * keyEvent )$/;"	f	class:TextView
laidoutDocBlockCount	.\textBlock.h	/^	size_t	laidoutDocBlockCount() const { return m_laidoutDocBlockCount; }$/;"	f	class:LaidoutBlocksMgr
laidoutViewBlockCount	.\textBlock.h	/^	size_t	laidoutViewBlockCount() const { return m_blockSize.size(); }$/;"	f	class:LaidoutBlocksMgr
lastBlock	.\TextView.cpp	/^ViewBlock TextView::lastBlock() const$/;"	f	class:TextView
lastBlock	.\TextDocument.h	/^	DocBlock	lastBlock() { return DocBlock(this, blockCount() - 1); }$/;"	f	class:TextDocument
lastBlock	.\TextDocument.h	/^	DocBlock	lastBlock()$/;"	f	class:TextDocument
lastBlock	.\textBlock.cpp	/^LaidoutBlock LaidoutBlocksMgr::lastBlock() const$/;"	f	class:LaidoutBlocksMgr
lastPosition	.\textCursor.h	/^	index_t lastPosition() const { return qMax(position(), anchor()); }$/;"	f	class:DocCursor
lastVisibleBlockPtr	.\TextView.cpp	/^const ViewBlock *TextView::lastVisibleBlockPtr() const$/;"	f	class:TextView
layout100Blocks	.\TextView.cpp	/^void TextView::layout100Blocks()$/;"	f	class:TextView
layoutText	.\TextView.cpp	/^void TextView::layoutText(std::vector<size_t> &v, const DocBlock &block, int wdLimit, int tabWidth)$/;"	f	class:TextView
layoutText	.\TextView.cpp	/^void TextView::layoutText(std::vector<size_t> &v, const QString &text,$/;"	f	class:TextView
layoutText	.\textBlock.cpp	/^void layoutText(std::vector<size_t> &v, QFontMetrics &fm, const DocBlock &block, int wdLimit)$/;"	f
layoutedDocBlockCount	.\TextView.h	/^	size_t	layoutedDocBlockCount() const { return m_layoutedDocBlockCount; }$/;"	f	class:TextView
lbMgr	.\TextView.h	/^	LaidoutBlocksMgr	*lbMgr() const { return m_lbMgr; }$/;"	f	class:TextView
length	.\textBlock.h	/^	size_t		length() const { return size(); }$/;"	f	class:DocBlock
lineBreakMode	.\TextView.h	/^	bool	lineBreakMode() const { return m_lineBreakMode; }$/;"	f	class:TextView
lineNumberLength	.\TextView.cpp	/^int TextView::lineNumberLength() const$/;"	f	class:TextView
linebreakAct	.\mainwindow.h	/^    QAction *linebreakAct;		\/\/	右端で折り返し$/;"	m	class:MainWindow
loadFile	.\mainwindow.cpp	/^void MainWindow::loadFile(const QString &fileName, int lineNum)$/;"	f	class:MainWindow
loadFile	.\charEncoding.cpp	/^bool loadFile(const QString &fileName, QString &buffer, QString &errorString,$/;"	f
m_EOLCode	.\TextDocument.h	/^	uchar	m_EOLCode;$/;"	m	class:TextDocument
m_absFilePath	.\mainwindow.h	/^	QString	m_absFilePath;$/;"	m	class:MainWindow
m_anchor	.\textCursor.h	/^	index_t			m_anchor;		\/\/	アンカー位置$/;"	m	class:DocCursor
m_anchorBlockData	.\textCursor.h	/^	BlockData	m_anchorBlockData;$/;"	m	class:DocCursor
m_beforeSave	.\TextDocument.h	/^	bool	m_beforeSave:1;		\/\/	保存前の undo\/redo item$/;"	m	struct:GVUndoItem
m_benchmarkReplace	.\mainwindow.h	/^	bool	m_benchmarkReplace;$/;"	m	class:MainWindow
m_blockData	.\textCursor.h	/^	BlockData	m_blockData;$/;"	m	class:DocCursor
m_blockIndex	.\TextView.h	/^	index_t	m_blockIndex;	\/\/	ブロックインデックス$/;"	m	struct:ViewLine
m_blockSize	.\TextView.h	/^	mutable std::gap_vector<uint>	m_blockSize;	\/\/	レイアウト済み行の行長$/;"	m	class:TextView
m_blockSize	.\textBlock.h	/^	std::gap_vector<size_t>	m_blockSize;		\/\/	ビューブロック長、0 ならは未レイアウト$/;"	m	class:LaidoutBlocksMgr
m_blocks	.\TextDocument.h	/^	mutable std::gap_vector<DocBlockItem>	m_blocks;		\/\/	ブロック配列$/;"	m	class:TextDocument
m_blocks	.\textBlock.h	/^	std::gap_vector<size_t>	m_blocks;	\/\/	レイアウト済みブロック長配列$/;"	m	struct:LaidoutChunk
m_buffer	.\TextDocument.h	/^	mutable std::gap_vector<uchar>	m_buffer;$/;"	m	class:TextDocument
m_cacheBlock	.\textBlock.h	/^	mutable LaidoutBlock	*m_cacheBlock;$/;"	m	class:LaidoutBlocksMgr
m_cacheBlockData	.\TextView.h	/^	mutable BlockData	m_cacheBlockData;			\/\/	カレントブロック情報$/;"	m	class:TextView
m_cacheBlockData	.\TextDocument.h	/^	mutable BlockData	m_cacheBlockData;			\/\/	カレントブロック情報$/;"	m	class:TextDocument
m_caseComboBox	.\ReplaceDlg.h	/^	QComboBox	*m_caseComboBox;$/;"	m	class:ReplaceDlg
m_caseComboBox	.\FindDlg.h	/^	QComboBox	*m_caseComboBox;$/;"	m	class:FindDlg
m_cdyCmd	.\ViEngine.h	/^	ushort	m_cdyCmd;				\/\/	c | d | y コマンド$/;"	m	class:ViEngine
m_cdyPos	.\ViEngine.h	/^	int		m_cdyPos;				\/\/	c|d|y が押された時のカーソル位置$/;"	m	class:ViEngine
m_charEncoding	.\TextDocument.h	/^	uchar	m_charEncoding;$/;"	m	class:TextDocument
m_chunkIndex	.\textBlock.h	/^	index_t		m_chunkIndex;$/;"	m	class:LaidoutBlock
m_chunks	.\textBlock.h	/^	std::gap_vector<LaidoutChunk>	m_chunks;$/;"	m	class:LaidoutBlocksMgr
m_cmdLineEdit	.\mainwindow.h	/^	QLineEdit	*m_cmdLineEdit;$/;"	m	class:MainWindow
m_cmdPrefix	.\ViEngine.h	/^	ushort	m_cmdPrefix;			\/\/	]] [[ の様な２ストロークコマンドの最初の文字$/;"	m	class:ViEngine
m_cmdString	.\ViEngine.h	/^	QString	m_cmdString;			\/\/	入力中コマンドテキスト$/;"	m	class:ViEngine
m_cmdText	.\mainwindow.h	/^	QString		m_cmdText;			\/\/	QLineEdit に実際に入力されたテキスト$/;"	m	class:MainWindow
m_curFile	.\mainwindow.h	/^	QString	m_curFile;$/;"	m	class:MainWindow
m_curLineNum	.\ViEngine.h	/^	int		m_curLineNum;			\/\/	. lineNumber$/;"	m	class:ViEngine
m_current	.\TextDocument.h	/^	uint	m_current;		\/\/	オブジェクトを次に入れる位置（0..*）$/;"	m	class:GVUndoMgr
m_data	.\textBlock.h	/^	BlockData	m_data;$/;"	m	class:DocBlock
m_dirGroup	.\FindDlg.h	/^	QGroupBox	*m_dirGroup;$/;"	m	class:FindDlg
m_docBlockData	.\textBlock.h	/^	BlockData	m_docBlockData;$/;"	m	class:LaidoutBlock
m_document	.\TextView.h	/^	TextDocument	*m_document;$/;"	m	class:TextView
m_document	.\textCursor.h	/^	TextDocument	*m_document;$/;"	m	class:DocCursor
m_document	.\textBlock.h	/^	TextDocument	*m_document;$/;"	m	class:DocBlock
m_document	.\textBlock.h	/^	TextDocument	*m_document;$/;"	m	class:LaidoutBlocksMgr
m_drawCursor	.\TextView.h	/^	bool	m_drawCursor;$/;"	m	class:TextView
m_editor	.\ViEngine.h	/^	TextView	*m_editor;$/;"	m	class:ViEngine
m_exCmdsIx	.\mainwindow.h	/^	int			m_exCmdsIx;$/;"	m	class:MainWindow
m_exCommands	.\ViEngine.h	/^	QStringList	m_exCommands;		\/\/	入力された ex-command 文字列$/;"	m	class:ViEngine
m_failCount	.\unit_test.h	/^	int		m_failCount;		\/\/	失敗回数$/;"	m	class:CUnitTest
m_fileName	.\unit_test.h	/^	QString		m_fileName;$/;"	m	struct:SFailedInfo
m_findBackWard	.\ReplaceDlg.h	/^	QRadioButton	*m_findBackWard;$/;"	m	class:ReplaceDlg
m_findBackWard	.\FindDlg.h	/^	QRadioButton	*m_findBackWard;$/;"	m	class:FindDlg
m_findForward	.\ViEngine.h	/^	bool	m_findForward;			\/\/	順方向検索$/;"	m	class:ViEngine
m_findString	.\ViEngine.h	/^	QString	m_findString;			\/\/	検索正規表現文字列$/;"	m	class:ViEngine
m_findStringCB	.\ReplaceDlg.h	/^	QComboBox	*m_findStringCB;$/;"	m	class:ReplaceDlg
m_findStringCB	.\FindDlg.h	/^	QComboBox	*m_findStringCB;$/;"	m	class:FindDlg
m_findStrings	.\mainwindow.h	/^	QStringList	m_findStrings;		\/\/	検索（正規表現）文字列履歴$/;"	m	class:MainWindow
m_first	.\TextDocument.h	/^	index_t	m_first;$/;"	m	struct:GVUndoItem
m_first	.\gap_vector.h	/^	pointer	m_first;		\/\/   ↓first   ↓gapBegi n   ↓gapEnd        ↓m_last$/;"	m	class:std::gap_vector
m_firstUnlayoutedBlockCount	.\TextView.h	/^	size_t	m_firstUnlayoutedBlockCount;		\/\/	前半未レイアウト部分のDocBlock数$/;"	m	class:TextView
m_firstVisibleBlock	.\TextView.h	/^	mutable BlockData	m_firstVisibleBlock;			\/\/	表示開始行$/;"	m	class:TextView
m_firstVisibleDocBlockNumber	.\TextView.h	/^	mutable size_t		m_firstVisibleDocBlockNumber;$/;"	m	class:TextView
m_flags	.\TextDocument.h	/^	short	m_flags;$/;"	m	struct:GVUndoItem
m_fullPath	.\TextDocument.h	/^	QString	m_fullPath;$/;"	m	class:TextDocument
m_gapBegin	.\gap_vector.h	/^	const_pointer m_gapBegin;$/;"	m	class:std::_Gap_Vector_Const_Iterator
m_gapBegin	.\gap_vector.h	/^	pointer	m_gapBegin;		\/\/	┌────┬──────┬───────┐  $/;"	m	class:std::gap_vector
m_gapBegin	.\gap_vector.h	/^	pointer m_gapBegin;$/;"	m	class:std::_Gap_Vector_Iterator
m_gapEnd	.\gap_vector.h	/^	const_pointer m_gapEnd;$/;"	m	class:std::_Gap_Vector_Const_Iterator
m_gapEnd	.\gap_vector.h	/^	pointer	m_gapEnd;		\/\/  │  data  │    gap     │     data     │$/;"	m	class:std::gap_vector
m_gapEnd	.\gap_vector.h	/^	pointer m_gapEnd;$/;"	m	class:std::_Gap_Vector_Iterator
m_heap	.\TextDocument.h	/^	std::vector<uchar>	m_heap;			\/\/	undo のための文字列を格納するヒープ$/;"	m	class:GVUndoMgr
m_hp_ix	.\TextDocument.h	/^	index_t	m_hp_ix;$/;"	m	struct:GVUndoItem
m_index	.\textBlock.h	/^	index_t		m_index;$/;"	m	struct:BlockData
m_indexInChunk	.\textBlock.h	/^	index_t		m_indexInChunk;$/;"	m	class:LaidoutBlock
m_insCount	.\ViEngine.h	/^	int		m_insCount;				\/\/	挿入回数$/;"	m	class:ViEngine
m_insertedText	.\ViEngine.h	/^	QString	m_insertedText;			\/\/	挿入されたテキスト$/;"	m	class:ViEngine
m_isModified	.\mainwindow.h	/^	bool	m_isModified;$/;"	m	class:MainWindow
m_isUntitled	.\mainwindow.h	/^	bool	m_isUntitled;$/;"	m	class:MainWindow
m_items	.\TextDocument.h	/^	std::vector<GVUndoItem>	m_items;$/;"	m	class:GVUndoMgr
m_joinPrevEditBlock	.\ViEngine.h	/^	bool	m_joinPrevEditBlock;		\/\/	$/;"	m	class:ViEngine
m_laidoutDocBlockCount	.\textBlock.h	/^	size_t	m_laidoutDocBlockCount;				\/\/	レイアウト済みドキュメントブロック数$/;"	m	class:LaidoutBlocksMgr
m_laidoutDocBlockCount	.\textBlock.h	/^	size_t	m_laidoutDocBlockCount;		\/\/	レイアウト済みドキュメントブロック数$/;"	m	struct:LaidoutChunk
m_last	.\TextDocument.h	/^	index_t	m_last;				\/\/	挿入・削除・置換前範囲$/;"	m	struct:GVUndoItem
m_last	.\gap_vector.h	/^	pointer	m_last;			\/\/  └────┴──────┴───────┘$/;"	m	class:std::gap_vector
m_last2	.\TextDocument.h	/^	index_t	m_last2;			\/\/	置換後の範囲$/;"	m	struct:GVUndoItem
m_lastFTChar	.\ViEngine.h	/^	QChar	m_lastFTChar;			\/\/	fFtT 検索文字$/;"	m	class:ViEngine
m_lastFTCmd	.\ViEngine.h	/^	ushort	m_lastFTCmd;			\/\/	'f' or 'F' or't' or 'T'$/;"	m	class:ViEngine
m_layoutedDocBlockCount	.\TextView.h	/^	size_t	m_layoutedDocBlockCount;				\/\/	レイアウト済み行のDocBlock数$/;"	m	class:TextView
m_lbMgr	.\TextView.h	/^	mutable LaidoutBlocksMgr	*m_lbMgr;$/;"	m	class:TextView
m_lbMgr	.\textBlock.h	/^	LaidoutBlocksMgr	*m_lbMgr;$/;"	m	class:LaidoutBlock
m_lineBreakMode	.\TextView.h	/^	bool	m_lineBreakMode;					\/\/	右端で折り返し$/;"	m	class:TextView
m_lineBreaking	.\TextView.h	/^	bool	m_lineBreaking;						\/\/	折り返し処理中$/;"	m	class:TextView
m_lineNum	.\unit_test.h	/^	int				m_lineNum;$/;"	m	struct:SFailedInfo
m_lineNum1	.\ViEngine.h	/^	int		m_lineNum1;				\/\/	ex command range from$/;"	m	class:ViEngine
m_lineNum2	.\ViEngine.h	/^	int		m_lineNum2;				\/\/	ex command range to$/;"	m	class:ViEngine
m_lineNumberArea	.\TextView.h	/^	QWidget	*m_lineNumberArea;$/;"	m	class:TextView
m_lineNumberAreaWidth	.\TextView.h	/^	int		m_lineNumberAreaWidth;$/;"	m	class:TextView
m_lineNumberWidth	.\TextView.h	/^	int		m_lineNumberWidth;$/;"	m	class:TextView
m_logs	.\unit_test.h	/^	std::vector<SFailedInfo>	m_logs;$/;"	m	class:CUnitTest
m_message	.\ViEngine.h	/^	QString	m_message;$/;"	m	class:ViEngine
m_message	.\unit_test.h	/^	QString		m_message;$/;"	m	struct:SFailedInfo
m_mode	.\ViEngine.h	/^	Mode	m_mode;$/;"	m	class:ViEngine
m_modified	.\TextDocument.h	/^	bool	m_modified;$/;"	m	class:TextDocument
m_mouseCaptured	.\TextView.h	/^	bool	m_mouseCaptured;$/;"	m	class:TextView
m_moveByLine	.\ViEngine.h	/^	bool	m_moveByLine;			\/\/	行単位移動 } { H M L G$/;"	m	class:ViEngine
m_multiCursor	.\TextView.h	/^	std::vector<ViewCursor>	m_multiCursor;		\/\/	副カーソル、position をキーに昇順ソート済みとする$/;"	m	class:TextView
m_nLineNum	.\ViEngine.h	/^	int		m_nLineNum;				\/\/	指定された行番号数$/;"	m	class:ViEngine
m_noInsModeAtImeOpenStatus	.\ViEngine.h	/^	bool	m_noInsModeAtImeOpenStatus;		\/\/	IME ON・OFFが変わっても挿入モードに遷移しない$/;"	m	class:ViEngine
m_noRepeatCount	.\ViEngine.h	/^	bool	m_noRepeatCount;		\/\/	繰り返し回数指定不可（for fFtT等）$/;"	m	class:ViEngine
m_offset	.\textCursor.h	/^	index_t			m_offset;		\/\/	行頭からのオフセット値（本来の値）$/;"	m	class:DocCursor
m_output	.\mainwindow.h	/^	QTextEdit	*m_output;$/;"	m	class:MainWindow
m_outputDock	.\mainwindow.h	/^	QDockWidget	*m_outputDock;$/;"	m	class:MainWindow
m_overwriteMode	.\TextView.h	/^	bool	m_overwriteMode;				\/\/	上書きモード$/;"	m	class:TextView
m_position	.\TextView.h	/^	index_t	m_position;		\/\/	行頭文字位置$/;"	m	struct:ViewLine
m_position	.\textCursor.h	/^	index_t			m_position;		\/\/	カーソル位置$/;"	m	class:DocCursor
m_position	.\textBlock.h	/^	index_t		m_position;$/;"	m	struct:BlockData
m_preeditPosCursor	.\TextView.h	/^	ViewCursor	*m_preeditPosCursor;$/;"	m	class:TextView
m_preeditString	.\TextView.h	/^	QString	m_preeditString;$/;"	m	class:TextView
m_ptr	.\gap_vector.h	/^	const_pointer m_ptr;$/;"	m	class:std::_Gap_Vector_Const_Iterator
m_ptr	.\gap_vector.h	/^	pointer m_ptr;$/;"	m	class:std::_Gap_Vector_Iterator
m_redoCmd	.\ViEngine.h	/^	QString	m_redoCmd;				\/\/	.(redo) で再実行するコマンド$/;"	m	class:ViEngine
m_redoHeap	.\TextDocument.h	/^	std::vector<uchar>	m_redoHeap;		\/\/	redo のための文字列を格納するヒープ$/;"	m	class:GVUndoMgr
m_redoRecording	.\ViEngine.h	/^	bool	m_redoRecording;		\/\/	.(redo) のために挿入文字列記録中$/;"	m	class:ViEngine
m_redoRepeatCount	.\ViEngine.h	/^	int		m_redoRepeatCount;$/;"	m	class:ViEngine
m_redoing	.\ViEngine.h	/^	bool	m_redoing;				\/\/	.(redo) 実行中$/;"	m	class:ViEngine
m_repeatCount	.\ViEngine.h	/^	int		m_repeatCount;$/;"	m	class:ViEngine
m_repeatCount2	.\ViEngine.h	/^	int		m_repeatCount2;			\/\/	c2w のようにコマンドの間に指定された繰り返し回数$/;"	m	class:ViEngine
m_replaceStringCB	.\ReplaceDlg.h	/^	QComboBox	*m_replaceStringCB;$/;"	m	class:ReplaceDlg
m_rhp_ix	.\TextDocument.h	/^	index_t	m_rhp_ix;			\/\/	redo 用ヒープインデックス$/;"	m	struct:GVUndoItem
m_size	.\TextDocument.h	/^	size_t		m_size;		\/\/	ブロック内文字サイズ$/;"	m	struct:DocBlockItem
m_size	.\textCursor.h	/^	size_t		m_size;		\/\/	ブロック内文字サイズ$/;"	m	struct:ViewTextBlockItem
m_testCount	.\unit_test.h	/^	int		m_testCount;		\/\/	テスト回数$/;"	m	class:CUnitTest
m_textCursor	.\TextView.h	/^	ViewCursor	*m_textCursor;					\/\/	ビュー用カーソル$/;"	m	class:TextView
m_timer	.\TextView.h	/^	QTimer	*m_timer;					\/\/	タイマーオブジェクト$/;"	m	class:TextView
m_toDeleteIMEPreeditText	.\TextView.h	/^	bool	m_toDeleteIMEPreeditText;$/;"	m	class:TextView
m_toSetBlockFlag	.\TextDocument.h	/^	bool	m_toSetBlockFlag;			\/\/	次の push_back で block フラグを立てる$/;"	m	class:GVUndoMgr
m_toTerminate	.\LayoutThread.h	/^	bool		m_toTerminate;		\/\/	処理中断フラグ$/;"	m	class:LayoutThread
m_type	.\TextDocument.h	/^	uchar	m_type;$/;"	m	struct:GVUndoItem
m_unLaidoutDocBlockCount	.\textBlock.h	/^	size_t	m_unLaidoutDocBlockCount;	\/\/	先行する未レイアウトブロック数$/;"	m	struct:LaidoutChunk
m_undoBlockLevel	.\TextDocument.h	/^	uint	m_undoBlockLevel;$/;"	m	class:GVUndoMgr
m_undoMgr	.\TextDocument.h	/^	GVUndoMgr	m_undoMgr;$/;"	m	class:TextDocument
m_unitName	.\unit_test.h	/^	QString	m_unitName;$/;"	m	class:CUnitTest
m_unitTestDoc	.\mainwindow.h	/^	bool	m_unitTestDoc;$/;"	m	class:MainWindow
m_unitTestLaidoutBlocksMgr	.\mainwindow.h	/^	bool	m_unitTestLaidoutBlocksMgr;$/;"	m	class:MainWindow
m_unitTestView	.\mainwindow.h	/^	bool	m_unitTestView;$/;"	m	class:MainWindow
m_vSize	.\LayoutThread.h	/^	std::vector<size_t>		m_vSize;	\/\/	レイアウトされた行長$/;"	m	class:LayoutThread
m_validFirstVisibleBlock	.\TextView.h	/^	mutable bool		m_validFirstVisibleBlock;		\/\/	m_firstVisibleBlock 有効$/;"	m	class:TextView
m_viEngine	.\TextView.h	/^	ViEngine	*m_viEngine;$/;"	m	class:TextView
m_viEngine	.\mainwindow.h	/^	ViEngine	*m_viEngine;$/;"	m	class:MainWindow
m_view	.\mainwindow.h	/^	TextView	*m_view;$/;"	m	class:MainWindow
m_view	.\textCursor.h	/^	TextView	*m_view;$/;"	m	class:ViewCursor
m_view	.\textBlock.h	/^	TextView	*m_view;$/;"	m	class:ViewBlock
m_viewAnchorBlockData	.\textCursor.h	/^	BlockData	m_viewAnchorBlockData;$/;"	m	class:ViewCursor
m_viewBlock	.\textBlock.h	/^	BlockData	m_viewBlock;		\/\/	m_position	行頭文字位置$/;"	m	class:ViewBlock
m_viewBlockData	.\textCursor.h	/^	BlockData	m_viewBlockData;$/;"	m	class:ViewCursor
m_viewBlockData	.\textBlock.h	/^	BlockData	m_viewBlockData;$/;"	m	class:LaidoutBlock
m_viewTextCursor	.\TextView.h	/^	ViewCursor	m_viewTextCursor;$/;"	m	class:TextView
m_viewportWidth	.\TextView.h	/^	int		m_viewportWidth;$/;"	m	class:TextView
m_width	.\textBlock.h	/^	int		m_width;$/;"	m	class:LaidoutBlocksMgr
m_withBOM	.\TextDocument.h	/^	bool	m_withBOM;$/;"	m	class:TextDocument
m_x	.\textCursor.h	/^	int			m_x;$/;"	m	class:ViewCursor
m_yankBuffer	.\ViEngine.h	/^	QString	m_yankBuffer;			\/\/	無名ヤンクバッファ$/;"	m	class:ViEngine
m_yankByLine	.\ViEngine.h	/^	bool	m_yankByLine;			\/\/	ヤンクバッファ：行単位$/;"	m	class:ViEngine
main	.\main.cpp	/^int main(int argc, char *argv[])$/;"	f
mainToolBar	.\GeneratedFiles\ui_mainwindow.h	/^    QToolBar *mainToolBar;$/;"	m	class:Ui_MainWindowClass
makeFontBigger	.\TextView.cpp	/^void TextView::makeFontBigger(bool bigger)$/;"	f	class:TextView
maybeSave	.\mainwindow.cpp	/^bool MainWindow::maybeSave()$/;"	f	class:MainWindow
menuBar	.\GeneratedFiles\ui_mainwindow.h	/^    QMenuBar *menuBar;$/;"	m	class:Ui_MainWindowClass
message	.\ViEngine.h	/^	const QString &message() const { return m_message; }$/;"	f	class:ViEngine
metaObject	.\GeneratedFiles\Debug\moc_FindDlg.cpp	/^const QMetaObject *FindDlg::metaObject() const$/;"	f	class:FindDlg
metaObject	.\GeneratedFiles\Debug\moc_ReplaceDlg.cpp	/^const QMetaObject *ReplaceDlg::metaObject() const$/;"	f	class:ReplaceDlg
metaObject	.\GeneratedFiles\Debug\moc_TextDocument.cpp	/^const QMetaObject *TextDocument::metaObject() const$/;"	f	class:TextDocument
metaObject	.\GeneratedFiles\Debug\moc_TextView.cpp	/^const QMetaObject *TextView::metaObject() const$/;"	f	class:TextView
metaObject	.\GeneratedFiles\Debug\moc_mainwindow.cpp	/^const QMetaObject *MainWindow::metaObject() const$/;"	f	class:MainWindow
metaObject	.\GeneratedFiles\Release\moc_FindDlg.cpp	/^const QMetaObject *FindDlg::metaObject() const$/;"	f	class:FindDlg
metaObject	.\GeneratedFiles\Release\moc_ReplaceDlg.cpp	/^const QMetaObject *ReplaceDlg::metaObject() const$/;"	f	class:ReplaceDlg
metaObject	.\GeneratedFiles\Release\moc_TextDocument.cpp	/^const QMetaObject *TextDocument::metaObject() const$/;"	f	class:TextDocument
metaObject	.\GeneratedFiles\Release\moc_TextView.cpp	/^const QMetaObject *TextView::metaObject() const$/;"	f	class:TextView
metaObject	.\GeneratedFiles\Release\moc_mainwindow.cpp	/^const QMetaObject *MainWindow::metaObject() const$/;"	f	class:MainWindow
mode	.\ViEngine.h	/^	Mode	mode() const { return m_mode; }$/;"	f	class:ViEngine
mouseDoubleClickEvent	.\TextView.cpp	/^void TextView::mouseDoubleClickEvent ( QMouseEvent * event )$/;"	f	class:TextView
mouseMoveEvent	.\TextView.cpp	/^void TextView::mouseMoveEvent ( QMouseEvent * event )$/;"	f	class:TextView
mousePressEvent	.\TextView.cpp	/^void TextView::mousePressEvent ( QMouseEvent * event )$/;"	f	class:TextView
mouseReleaseEvent	.\TextView.cpp	/^void TextView::mouseReleaseEvent ( QMouseEvent * event )$/;"	f	class:TextView
move	.\textCursor.cpp	/^void DocCursor::move(int d)$/;"	f	class:DocCursor
move	.\textCursor.cpp	/^void ViewCursor::move(int d)$/;"	f	class:ViewCursor
moveCursor	.\viCursor.cpp	/^bool moveCursor(ViewCursor &cur, \/\/int &x,$/;"	f
moveCursorFind	.\viCursor.cpp	/^bool moveCursorFind(ViewCursor &cur, const QRegExp &rex, bool forward, int nth)$/;"	f
moveCursorFindBackward	.\viCursor.cpp	/^index_t moveCursorFindBackward(const QRegExp &rex, ViewBlock &block, int ix, int &nth, int limit)$/;"	f
moveCursorFindForward	.\viCursor.cpp	/^index_t moveCursorFindForward(const QRegExp &rex, ViewBlock &block, int ix, int &nth, int limit)$/;"	f
moveCursorFindInLine	.\viCursor.cpp	/^bool moveCursorFindInLine(ViewCursor &cur, ushort cmd, const QChar &qch, int n)$/;"	f
moveLeftIfEndOfLine	.\textCursor.cpp	/^void DocCursor::moveLeftIfEndOfLine()$/;"	f	class:DocCursor
movePosition	.\textCursor.cpp	/^bool DocCursor::movePosition(uchar move, uchar mode, uint n, bool cdy)$/;"	f	class:DocCursor
movePosition	.\textCursor.cpp	/^bool ViewCursor::movePosition(uchar move, uchar mode, uint n, bool cdy)$/;"	f	class:ViewCursor
movePositionByCharCount	.\TextView.cpp	/^index_t TextView::movePositionByCharCount(index_t pos, int n) const$/;"	f	class:TextView
moveToEndOfDocument	.\textBlock.cpp	/^void LaidoutBlock::moveToEndOfDocument()$/;"	f	class:LaidoutBlock
moveToFirstNonBlankChar	.\viCursor.cpp	/^void moveToFirstNonBlankChar(ViewCursor &cur)$/;"	f
move_data	.\gap_vector.h	/^	void move_data(pointer dst, pointer src, int sz)$/;"	f	class:std::gap_vector
move_data_backward	.\gap_vector.h	/^	void move_data_backward(pointer dst, pointer src, int sz)$/;"	f	class:std::gap_vector
move_gap	.\gap_vector.h	/^	void	move_gap(const Iterator &itr)$/;"	f	class:std::gap_vector
move_gap	.\gap_vector.h	/^	void	move_gap(size_type ix)$/;"	f	class:std::gap_vector
move_gap_to_tail	.\gap_vector.h	/^	void	move_gap_to_tail()	\/\/	ギャップを末尾に移動$/;"	f	class:std::gap_vector
nLinesPosition	.\ViEngine.cpp	/^int nLinesPosition(DocCursor cur, int n)$/;"	f
n_failed	.\unit_test.cpp	/^	size_t n_failed = 0;		\/\/	トータル失敗回数$/;"	v
n_test	.\unit_test.cpp	/^	size_t n_test = 0;			\/\/	トータルテスト回数$/;"	v
newAct	.\mainwindow.h	/^	QAction *newAct;$/;"	m	class:MainWindow
newFile	.\mainwindow.cpp	/^void MainWindow::newFile()$/;"	f	class:MainWindow
newlineLength	.\textBlock.cpp	/^size_t DocBlock::newlineLength() const$/;"	f	class:DocBlock
newlineLength	.\textBlock.cpp	/^size_t DocBlock::newlineLength(index_t pos) const$/;"	f	class:DocBlock
next	.\textBlock.cpp	/^DocBlock DocBlock::next() const$/;"	f	class:DocBlock
next	.\textBlock.cpp	/^ViewBlock ViewBlock::next() const$/;"	f	class:ViewBlock
nextBlockData	.\TextView.h	/^	BlockData	nextBlockData(BlockData d) const$/;"	f	class:TextView
nextBlockData	.\TextDocument.h	/^	BlockData	nextBlockData(BlockData d) const$/;"	f	class:TextDocument
nextBlockPosition	.\textBlock.h	/^	index_t		nextBlockPosition() const { return position() + size(); }$/;"	f	class:DocBlock
nextBlockPosition	.\textBlock.h	/^	index_t		nextBlockPosition() const { return position() + size(); }$/;"	f	class:ViewBlock
onBenchmarkReplace	.\mainwindow.cpp	/^void MainWindow::onBenchmarkReplace(bool b)$/;"	f	class:MainWindow
onBlockCountChanged	.\TextView.cpp	/^void TextView::onBlockCountChanged()$/;"	f	class:TextView
onFindClose	.\FindDlg.cpp	/^void FindDlg::onFindClose()$/;"	f	class:FindDlg
onFindNext	.\FindDlg.cpp	/^void FindDlg::onFindNext()$/;"	f	class:FindDlg
onFindNext	.\ReplaceDlg.cpp	/^void ReplaceDlg::onFindNext()$/;"	f	class:ReplaceDlg
onFindPrev	.\FindDlg.cpp	/^void FindDlg::onFindPrev()$/;"	f	class:FindDlg
onFindPrev	.\ReplaceDlg.cpp	/^void ReplaceDlg::onFindPrev()$/;"	f	class:ReplaceDlg
onFontChanged	.\TextView.cpp	/^void TextView::onFontChanged()$/;"	f	class:TextView
onImeOpenStatusChanged	.\mainwindow.cpp	/^void MainWindow::onImeOpenStatusChanged()$/;"	f	class:MainWindow
onImeOpenStatusChanged	.\ViEngine.cpp	/^void ViEngine::onImeOpenStatusChanged()$/;"	f	class:ViEngine
onLineBreak	.\TextView.cpp	/^void TextView::onLineBreak(bool b)$/;"	f	class:TextView
onModeChanged	.\mainwindow.cpp	/^void MainWindow::onModeChanged(Mode mode, ushort subMode)$/;"	f	class:MainWindow
onRedo	.\ReplaceDlg.h	/^	void	onRedo() { doRedo(); }$/;"	f	class:ReplaceDlg
onReplaceAll	.\ReplaceDlg.cpp	/^void ReplaceDlg::onReplaceAll()$/;"	f	class:ReplaceDlg
onReplaceFind	.\ReplaceDlg.cpp	/^void ReplaceDlg::onReplaceFind()$/;"	f	class:ReplaceDlg
onTimer	.\TextView.cpp	/^void TextView::onTimer()$/;"	f	class:TextView
onUndo	.\ReplaceDlg.h	/^	void	onUndo() { doUndo(); }$/;"	f	class:ReplaceDlg
onUnitTestDoc	.\mainwindow.cpp	/^void MainWindow::onUnitTestDoc(bool b)$/;"	f	class:MainWindow
onUnitTestView	.\mainwindow.cpp	/^void MainWindow::onUnitTestView(bool b)$/;"	f	class:MainWindow
open	.\mainwindow.cpp	/^void MainWindow::open()$/;"	f	class:MainWindow
open	.\mainwindow.cpp	/^void MainWindow::open(const QString &fileName)$/;"	f	class:MainWindow
openAct	.\mainwindow.h	/^	QAction *openAct;$/;"	m	class:MainWindow
openRecentFile	.\mainwindow.cpp	/^void MainWindow::openRecentFile()$/;"	f	class:MainWindow
openUndoBlock	.\TextDocument.cpp	/^void GVUndoMgr::openUndoBlock()$/;"	f	class:GVUndoMgr
openUndoBlock	.\TextDocument.h	/^	void	openUndoBlock() { m_undoMgr.openUndoBlock(); }$/;"	f	class:TextDocument
operator !=	.\textBlock.h	/^	bool	operator!=(const DocBlock &x) const$/;"	f	class:DocBlock
operator !=	.\textBlock.h	/^	bool	operator!=(const ViewBlock &x) const$/;"	f	class:ViewBlock
operator ++	.\textBlock.cpp	/^DocBlock &DocBlock::operator++()$/;"	f	class:DocBlock
operator ++	.\textBlock.cpp	/^LaidoutBlock &LaidoutBlock::operator++()$/;"	f	class:LaidoutBlock
operator ++	.\textBlock.cpp	/^ViewBlock &ViewBlock::operator++()$/;"	f	class:ViewBlock
operator --	.\textBlock.cpp	/^LaidoutBlock &LaidoutBlock::operator--()$/;"	f	class:LaidoutBlock
operator --	.\textBlock.cpp	/^ViewBlock &ViewBlock::operator--()$/;"	f	class:ViewBlock
operator <	.\textCursor.h	/^	bool	operator<(const DocCursor &x) const { return position() < x.position(); }$/;"	f	class:DocCursor
operator <	.\textBlock.h	/^	bool	operator<(const DocBlock &x) const$/;"	f	class:DocBlock
operator <	.\textBlock.h	/^	bool	operator<(const ViewBlock &x) const$/;"	f	class:ViewBlock
operator =	.\textCursor.cpp	/^ViewCursor &ViewCursor::operator=(const DocCursor &x)$/;"	f	class:ViewCursor
operator =	.\TextDocument.h	/^	GVUndoItem &operator=(const GVUndoItem &x)$/;"	f	struct:GVUndoItem
operator =	.\textBlock.cpp	/^ViewBlock &ViewBlock::operator=(const DocBlock &docBlock)$/;"	f	class:ViewBlock
operator =	.\textBlock.h	/^	LaidoutChunk	&operator=(const LaidoutChunk &x)$/;"	f	struct:LaidoutChunk
operator =	.\gap_vector.h	/^	gap_vector &operator=(const gap_vector &x)$/;"	f	class:std::gap_vector
operator =	.\unit_test.h	/^	const SFailedInfo &operator=(const SFailedInfo &src)$/;"	f	struct:SFailedInfo
operator ==	.\textBlock.h	/^	bool	operator==(const DocBlock &x) const$/;"	f	class:DocBlock
operator ==	.\textBlock.h	/^	bool	operator==(const LaidoutBlock &x) const { return index() == x.index(); }$/;"	f	class:LaidoutBlock
operator ==	.\textBlock.h	/^	bool	operator==(const ViewBlock &x) const$/;"	f	class:ViewBlock
operator []	.\TextDocument.h	/^	uchar	operator[](index_t ix) const { return m_buffer[ix]; }$/;"	f	class:TextDocument
operator []	.\gap_vector.h	/^	const_reference operator[](size_type n) const { return *get_pointer(n); }$/;"	f	class:std::gap_vector
operator []	.\gap_vector.h	/^	reference operator[](size_type n) { return *get_pointer(n); }$/;"	f	class:std::gap_vector
otherMenu	.\mainwindow.h	/^    QMenu	*otherMenu;$/;"	m	class:MainWindow
pMainWindow	.\mainwindow.cpp	/^MainWindow *pMainWindow;$/;"	v
paintEvent	.\TextView.cpp	/^void TextView::paintEvent(QPaintEvent * event)$/;"	f	class:TextView
parseSubstCmd	.\ViEngine.cpp	/^bool ViEngine::parseSubstCmd(const QString &text,$/;"	f	class:ViEngine
paste	.\TextView.cpp	/^void TextView::paste()$/;"	f	class:TextView
pasteAct	.\mainwindow.h	/^    QAction *pasteAct;$/;"	m	class:MainWindow
pointer	.\gap_vector.h	/^	typedef Type* pointer;$/;"	t	class:std::_Gap_Vector_Iterator
pointer	.\gap_vector.h	/^	typedef Type* pointer;$/;"	t	class:std::gap_vector
position	.\textBlock.cpp	/^index_t DocBlock::position() const$/;"	f	class:DocBlock
position	.\textBlock.cpp	/^index_t ViewBlock::position() const$/;"	f	class:ViewBlock
position	.\textCursor.h	/^	index_t	position() const { return m_position; }$/;"	f	class:DocCursor
position	.\textBlock.h	/^	index_t	position() const { return m_viewBlockData.m_position; }$/;"	f	class:LaidoutBlock
position	.\textBlock.h	/^	index_t position() const { return m_position; }$/;"	f	struct:BlockData
positionInBlock	.\textCursor.h	/^	index_t positionInBlock() const { return position() - blockPosition(); }$/;"	f	class:DocCursor
prev	.\textBlock.cpp	/^DocBlock DocBlock::prev() const$/;"	f	class:DocBlock
prev	.\textBlock.cpp	/^ViewBlock ViewBlock::prev() const$/;"	f	class:ViewBlock
prevBlockData	.\TextView.h	/^	BlockData	prevBlockData(BlockData d) const$/;"	f	class:TextView
prevBlockData	.\TextDocument.h	/^	BlockData	prevBlockData(BlockData d) const$/;"	f	class:TextDocument
prevCharsCount	.\textCursor.cpp	/^int DocCursor::prevCharsCount() const$/;"	f	class:DocCursor
prevCharsCount	.\textCursor.cpp	/^int ViewCursor::prevCharsCount() const$/;"	f	class:ViewCursor
print	.\TextView.cpp	/^void print(const std::vector<ViewCursor*> &v)$/;"	f
printBuffer	.\mainwindowTest.cpp	/^void MainWindow::printBuffer()$/;"	f	class:MainWindow
printBufferAct	.\mainwindow.h	/^	QAction	*printBufferAct;$/;"	m	class:MainWindow
printCursorPosition	.\ViEngine.cpp	/^void ViEngine::printCursorPosition()$/;"	f	class:ViEngine
printSettings	.\ViEngine.cpp	/^void ViEngine::printSettings()$/;"	f	class:ViEngine
processKeyPressEvent	.\ViEngine.cpp	/^bool ViEngine::processKeyPressEvent( QKeyEvent * event )$/;"	f	class:ViEngine
push_back	.\TextDocument.cpp	/^void GVUndoMgr::push_back(GVUndoItem *ptr, bool modified)$/;"	f	class:GVUndoMgr
push_back	.\TextDocument.cpp	/^void GVUndoMgr::push_back(const GVUndoItem &item, bool modified)$/;"	f	class:GVUndoMgr
push_back	.\gap_vector.h	/^	void push_back(Type v)$/;"	f	class:std::gap_vector
qCleanupResources_mainwindow	.\GeneratedFiles\qrc_mainwindow.cpp	/^int QT_MANGLE_NAMESPACE(qCleanupResources_mainwindow)()$/;"	f
qInitResources_mainwindow	.\GeneratedFiles\qrc_mainwindow.cpp	/^int QT_MANGLE_NAMESPACE(qInitResources_mainwindow)()$/;"	f
q_findBlockByNumber	.\mainwindowBench.cpp	/^void q_findBlockByNumber(uint n)$/;"	f
q_output	.\mainwindowTest.cpp	/^void q_output(const QString &mess)$/;"	f
q_replace35_mv7	.\mainwindowBench.cpp	/^void q_replace35_mv7(uint n)$/;"	f
q_replace_Abcde_XYZ	.\mainwindowBench.cpp	/^void q_replace_Abcde_XYZ(uint n)$/;"	f
q_replace_XYZ_Abcde	.\mainwindowBench.cpp	/^void q_replace_XYZ_Abcde(uint n)$/;"	f
qt_meta_data_FindDlg	.\GeneratedFiles\Debug\moc_FindDlg.cpp	/^static const uint qt_meta_data_FindDlg[] = {$/;"	v	file:
qt_meta_data_FindDlg	.\GeneratedFiles\Release\moc_FindDlg.cpp	/^static const uint qt_meta_data_FindDlg[] = {$/;"	v	file:
qt_meta_data_MainWindow	.\GeneratedFiles\Debug\moc_mainwindow.cpp	/^static const uint qt_meta_data_MainWindow[] = {$/;"	v	file:
qt_meta_data_MainWindow	.\GeneratedFiles\Release\moc_mainwindow.cpp	/^static const uint qt_meta_data_MainWindow[] = {$/;"	v	file:
qt_meta_data_ReplaceDlg	.\GeneratedFiles\Debug\moc_ReplaceDlg.cpp	/^static const uint qt_meta_data_ReplaceDlg[] = {$/;"	v	file:
qt_meta_data_ReplaceDlg	.\GeneratedFiles\Release\moc_ReplaceDlg.cpp	/^static const uint qt_meta_data_ReplaceDlg[] = {$/;"	v	file:
qt_meta_data_TextDocument	.\GeneratedFiles\Debug\moc_TextDocument.cpp	/^static const uint qt_meta_data_TextDocument[] = {$/;"	v	file:
qt_meta_data_TextDocument	.\GeneratedFiles\Release\moc_TextDocument.cpp	/^static const uint qt_meta_data_TextDocument[] = {$/;"	v	file:
qt_meta_data_TextView	.\GeneratedFiles\Debug\moc_TextView.cpp	/^static const uint qt_meta_data_TextView[] = {$/;"	v	file:
qt_meta_data_TextView	.\GeneratedFiles\Release\moc_TextView.cpp	/^static const uint qt_meta_data_TextView[] = {$/;"	v	file:
qt_meta_stringdata_FindDlg	.\GeneratedFiles\Debug\moc_FindDlg.cpp	/^static const char qt_meta_stringdata_FindDlg[] = {$/;"	v	file:
qt_meta_stringdata_FindDlg	.\GeneratedFiles\Release\moc_FindDlg.cpp	/^static const char qt_meta_stringdata_FindDlg[] = {$/;"	v	file:
qt_meta_stringdata_MainWindow	.\GeneratedFiles\Debug\moc_mainwindow.cpp	/^static const char qt_meta_stringdata_MainWindow[] = {$/;"	v	file:
qt_meta_stringdata_MainWindow	.\GeneratedFiles\Release\moc_mainwindow.cpp	/^static const char qt_meta_stringdata_MainWindow[] = {$/;"	v	file:
qt_meta_stringdata_ReplaceDlg	.\GeneratedFiles\Debug\moc_ReplaceDlg.cpp	/^static const char qt_meta_stringdata_ReplaceDlg[] = {$/;"	v	file:
qt_meta_stringdata_ReplaceDlg	.\GeneratedFiles\Release\moc_ReplaceDlg.cpp	/^static const char qt_meta_stringdata_ReplaceDlg[] = {$/;"	v	file:
qt_meta_stringdata_TextDocument	.\GeneratedFiles\Debug\moc_TextDocument.cpp	/^static const char qt_meta_stringdata_TextDocument[] = {$/;"	v	file:
qt_meta_stringdata_TextDocument	.\GeneratedFiles\Release\moc_TextDocument.cpp	/^static const char qt_meta_stringdata_TextDocument[] = {$/;"	v	file:
qt_meta_stringdata_TextView	.\GeneratedFiles\Debug\moc_TextView.cpp	/^static const char qt_meta_stringdata_TextView[] = {$/;"	v	file:
qt_meta_stringdata_TextView	.\GeneratedFiles\Release\moc_TextView.cpp	/^static const char qt_meta_stringdata_TextView[] = {$/;"	v	file:
qt_metacall	.\GeneratedFiles\Debug\moc_FindDlg.cpp	/^int FindDlg::qt_metacall(QMetaObject::Call _c, int _id, void **_a)$/;"	f	class:FindDlg
qt_metacall	.\GeneratedFiles\Debug\moc_ReplaceDlg.cpp	/^int ReplaceDlg::qt_metacall(QMetaObject::Call _c, int _id, void **_a)$/;"	f	class:ReplaceDlg
qt_metacall	.\GeneratedFiles\Debug\moc_TextDocument.cpp	/^int TextDocument::qt_metacall(QMetaObject::Call _c, int _id, void **_a)$/;"	f	class:TextDocument
qt_metacall	.\GeneratedFiles\Debug\moc_TextView.cpp	/^int TextView::qt_metacall(QMetaObject::Call _c, int _id, void **_a)$/;"	f	class:TextView
qt_metacall	.\GeneratedFiles\Debug\moc_mainwindow.cpp	/^int MainWindow::qt_metacall(QMetaObject::Call _c, int _id, void **_a)$/;"	f	class:MainWindow
qt_metacall	.\GeneratedFiles\Release\moc_FindDlg.cpp	/^int FindDlg::qt_metacall(QMetaObject::Call _c, int _id, void **_a)$/;"	f	class:FindDlg
qt_metacall	.\GeneratedFiles\Release\moc_ReplaceDlg.cpp	/^int ReplaceDlg::qt_metacall(QMetaObject::Call _c, int _id, void **_a)$/;"	f	class:ReplaceDlg
qt_metacall	.\GeneratedFiles\Release\moc_TextDocument.cpp	/^int TextDocument::qt_metacall(QMetaObject::Call _c, int _id, void **_a)$/;"	f	class:TextDocument
qt_metacall	.\GeneratedFiles\Release\moc_TextView.cpp	/^int TextView::qt_metacall(QMetaObject::Call _c, int _id, void **_a)$/;"	f	class:TextView
qt_metacall	.\GeneratedFiles\Release\moc_mainwindow.cpp	/^int MainWindow::qt_metacall(QMetaObject::Call _c, int _id, void **_a)$/;"	f	class:MainWindow
qt_metacast	.\GeneratedFiles\Debug\moc_FindDlg.cpp	/^void *FindDlg::qt_metacast(const char *_clname)$/;"	f	class:FindDlg
qt_metacast	.\GeneratedFiles\Debug\moc_ReplaceDlg.cpp	/^void *ReplaceDlg::qt_metacast(const char *_clname)$/;"	f	class:ReplaceDlg
qt_metacast	.\GeneratedFiles\Debug\moc_TextDocument.cpp	/^void *TextDocument::qt_metacast(const char *_clname)$/;"	f	class:TextDocument
qt_metacast	.\GeneratedFiles\Debug\moc_TextView.cpp	/^void *TextView::qt_metacast(const char *_clname)$/;"	f	class:TextView
qt_metacast	.\GeneratedFiles\Debug\moc_mainwindow.cpp	/^void *MainWindow::qt_metacast(const char *_clname)$/;"	f	class:MainWindow
qt_metacast	.\GeneratedFiles\Release\moc_FindDlg.cpp	/^void *FindDlg::qt_metacast(const char *_clname)$/;"	f	class:FindDlg
qt_metacast	.\GeneratedFiles\Release\moc_ReplaceDlg.cpp	/^void *ReplaceDlg::qt_metacast(const char *_clname)$/;"	f	class:ReplaceDlg
qt_metacast	.\GeneratedFiles\Release\moc_TextDocument.cpp	/^void *TextDocument::qt_metacast(const char *_clname)$/;"	f	class:TextDocument
qt_metacast	.\GeneratedFiles\Release\moc_TextView.cpp	/^void *TextView::qt_metacast(const char *_clname)$/;"	f	class:TextView
qt_metacast	.\GeneratedFiles\Release\moc_mainwindow.cpp	/^void *MainWindow::qt_metacast(const char *_clname)$/;"	f	class:MainWindow
qt_resource_data	.\GeneratedFiles\qrc_mainwindow.cpp	/^static const unsigned char qt_resource_data[] = {$/;"	v	file:
qt_resource_name	.\GeneratedFiles\qrc_mainwindow.cpp	/^static const unsigned char qt_resource_name[] = {$/;"	v	file:
qt_resource_struct	.\GeneratedFiles\qrc_mainwindow.cpp	/^static const unsigned char qt_resource_struct[] = {$/;"	v	file:
reLayoutBlocksUntillDocBlockNumber	.\TextView.cpp	/^void TextView::reLayoutBlocksUntillDocBlockNumber(DocBlock block,$/;"	f	class:TextView
readSettings	.\mainwindow.cpp	/^void MainWindow::readSettings()$/;"	f	class:MainWindow
recentFileActs	.\mainwindow.h	/^    QAction *recentFileActs[MaxRecentFiles];$/;"	m	class:MainWindow
redo	.\TextView.cpp	/^void TextView::redo()$/;"	f	class:TextView
redoAct	.\mainwindow.h	/^    QAction *redoAct;$/;"	m	class:MainWindow
reference	.\gap_vector.h	/^	typedef Type& reference;$/;"	t	class:std::gap_vector
removeOverlappedCursor	.\TextView.cpp	/^void TextView::removeOverlappedCursor()$/;"	f	class:TextView
repeatCount	.\ViEngine.cpp	/^int ViEngine::repeatCount() const$/;"	f	class:ViEngine
replace	.\TextView.cpp	/^void TextView::replace()$/;"	f	class:TextView
replaceAct	.\mainwindow.h	/^    QAction *replaceAct;$/;"	m	class:MainWindow
reserve	.\gap_vector.h	/^	void reserve(size_type n)$/;"	f	class:std::gap_vector
resetCursorBlink	.\TextView.cpp	/^void TextView::resetCursorBlink()$/;"	f	class:TextView
resetModifiedFlags	.\TextDocument.cpp	/^void GVUndoMgr::resetModifiedFlags()$/;"	f	class:GVUndoMgr
resetUndoBlock	.\TextDocument.cpp	/^void GVUndoMgr::resetUndoBlock()$/;"	f	class:GVUndoMgr
resize	.\gap_vector.h	/^	void resize(size_type n, value_type v = value_type())$/;"	f	class:std::gap_vector
resizeEvent	.\TextView.cpp	/^void TextView::resizeEvent(QResizeEvent *event)$/;"	f	class:TextView
retranslateUi	.\GeneratedFiles\ui_mainwindow.h	/^    void retranslateUi(QMainWindow *MainWindowClass)$/;"	f	class:Ui_MainWindowClass
rotateSelectedText	.\TextView.cpp	/^void TextView::rotateSelectedText(std::vector<ViewCursor*> &v)$/;"	f	class:TextView
run	.\LayoutThread.cpp	/^void LayoutThread::run()$/;"	f	class:LayoutThread
save	.\mainwindow.cpp	/^bool MainWindow::save()$/;"	f	class:MainWindow
save	.\mainwindow.cpp	/^void MainWindow::save(const QString &fileName)$/;"	f	class:MainWindow
saveAct	.\mainwindow.h	/^	QAction *saveAct;$/;"	m	class:MainWindow
saveAs	.\mainwindow.cpp	/^bool MainWindow::saveAs()$/;"	f	class:MainWindow
saveAsAct	.\mainwindow.h	/^	QAction *saveAsAct;$/;"	m	class:MainWindow
saveFile	.\mainwindow.cpp	/^bool MainWindow::saveFile(const QString &fileName, bool replace)$/;"	f	class:MainWindow
sbCharTypeTbl	.\textCursor.cpp	/^static uchar sbCharTypeTbl[] = {$/;"	v	file:
searchMenu	.\mainwindow.h	/^    QMenu	*searchMenu;$/;"	m	class:MainWindow
selectAll	.\TextView.cpp	/^void TextView::selectAll()$/;"	f	class:TextView
selectAllAct	.\mainwindow.h	/^    QAction *selectAllAct;$/;"	m	class:MainWindow
selectedText	.\textCursor.cpp	/^QString DocCursor::selectedText() const$/;"	f	class:DocCursor
separatorMRUAct	.\mainwindow.h	/^    QAction *separatorMRUAct;$/;"	m	class:MainWindow
setAnchor	.\textCursor.cpp	/^void DocCursor::setAnchor(index_t anchor)$/;"	f	class:DocCursor
setCharEncodeing	.\TextDocument.h	/^	void	setCharEncodeing(uchar ce) { m_charEncoding = ce; }$/;"	f	class:TextDocument
setCurrentFile	.\mainwindow.cpp	/^void MainWindow::setCurrentFile(const QString &fileName)$/;"	f	class:MainWindow
setEOLCode	.\TextDocument.cpp	/^void TextDocument::setEOLCode()$/;"	f	class:TextDocument
setEditor	.\ViEngine.cpp	/^void ViEngine::setEditor(TextView *editor)$/;"	f	class:ViEngine
setFocusToCmdLine	.\mainwindow.cpp	/^void MainWindow::setFocusToCmdLine()$/;"	f	class:MainWindow
setFontFamily	.\TextView.cpp	/^void TextView::setFontFamily(const QString &name)$/;"	f	class:TextView
setFontPointSize	.\TextView.cpp	/^void TextView::setFontPointSize(int sz)$/;"	f	class:TextView
setFullPath	.\TextDocument.h	/^	void	setFullPath(const QString &fullPath) { m_fullPath = fullPath; }$/;"	f	class:TextDocument
setLineBreakMode	.\TextView.h	/^	void	setLineBreakMode(bool b) { onLineBreak(b); }$/;"	f	class:TextView
setMode	.\ViEngine.cpp	/^void ViEngine::setMode(Mode mode, ushort subMode)$/;"	f	class:ViEngine
setModified	.\TextDocument.h	/^	void	setModified(bool b) { m_modified = b; }$/;"	f	class:TextDocument
setOverwriteMode	.\TextView.cpp	/^void TextView::setOverwriteMode(bool b)$/;"	f	class:TextView
setPlainText	.\TextDocument.cpp	/^void TextDocument::setPlainText(const QString &text)$/;"	f	class:TextDocument
setPosition	.\textCursor.cpp	/^void DocCursor::setPosition(index_t position, BlockData d, uchar mode)$/;"	f	class:DocCursor
setPosition	.\textCursor.cpp	/^void DocCursor::setPosition(index_t position, uchar mode)$/;"	f	class:DocCursor
setPosition	.\textCursor.cpp	/^void ViewCursor::setPosition(index_t position, uchar mode)$/;"	f	class:ViewCursor
setTextCursor	.\TextView.cpp	/^void TextView::setTextCursor(const ViewCursor &cur)$/;"	f	class:TextView
setViEngine	.\TextView.cpp	/^void TextView::setViEngine(ViEngine *viEngine)$/;"	f	class:TextView
setViewAnchorBlockData	.\textCursor.h	/^	void	setViewAnchorBlockData(BlockData d) { m_viewAnchorBlockData = d; }$/;"	f	class:ViewCursor
setViewBlockData	.\textCursor.h	/^	void	setViewBlockData(BlockData d) { m_viewBlockData = d; }$/;"	f	class:ViewCursor
setWidth	.\textBlock.h	/^	void	setWidth(int width) { m_width = width; }$/;"	f	class:LaidoutBlocksMgr
setWithBOM	.\TextDocument.h	/^	void	setWithBOM(bool b) { m_withBOM = b; }$/;"	f	class:TextDocument
setX	.\textCursor.h	/^	void	setX(int x) { m_x = x; }$/;"	f	class:ViewCursor
settingsMenu	.\mainwindow.h	/^    QMenu	*settingsMenu;$/;"	m	class:MainWindow
setupUi	.\GeneratedFiles\ui_mainwindow.h	/^    void setupUi(QMainWindow *MainWindowClass)$/;"	f	class:Ui_MainWindowClass
showAboutDlg	.\mainwindow.cpp	/^void MainWindow::showAboutDlg()$/;"	f	class:MainWindow
showMessage	.\mainwindow.cpp	/^void MainWindow::showMessage(const QString & text)$/;"	f	class:MainWindow
showMessage	.\GeneratedFiles\Debug\moc_TextView.cpp	/^void TextView::showMessage(const QString & _t1)$/;"	f	class:TextView
showMessage	.\GeneratedFiles\Release\moc_TextView.cpp	/^void TextView::showMessage(const QString & _t1)$/;"	f	class:TextView
size	.\TextView.cpp	/^size_t TextView::size() const$/;"	f	class:TextView
size	.\TextDocument.h	/^	size_t	size() const { return m_buffer.size(); }$/;"	f	class:TextDocument
size	.\textBlock.cpp	/^size_t DocBlock::size() const$/;"	f	class:DocBlock
size	.\textBlock.cpp	/^size_t LaidoutBlock::size() const$/;"	f	class:LaidoutBlock
size	.\textBlock.cpp	/^size_t LaidoutBlocksMgr::size() const$/;"	f	class:LaidoutBlocksMgr
size	.\textBlock.cpp	/^size_t ViewBlock::size() const$/;"	f	class:ViewBlock
size	.\gap_vector.h	/^	size_type	size() const { return !m_first ? 0 : (m_gapBegin - m_first) + (m_last - m_gapEnd); }$/;"	f	class:std::gap_vector
size_type	.\gap_vector.h	/^	typedef uint size_type;$/;"	t	class:std::gap_vector
staticMetaObject	.\GeneratedFiles\Debug\moc_FindDlg.cpp	/^const QMetaObject FindDlg::staticMetaObject = {$/;"	m	class:FindDlg	file:
staticMetaObject	.\GeneratedFiles\Debug\moc_ReplaceDlg.cpp	/^const QMetaObject ReplaceDlg::staticMetaObject = {$/;"	m	class:ReplaceDlg	file:
staticMetaObject	.\GeneratedFiles\Debug\moc_TextDocument.cpp	/^const QMetaObject TextDocument::staticMetaObject = {$/;"	m	class:TextDocument	file:
staticMetaObject	.\GeneratedFiles\Debug\moc_TextView.cpp	/^const QMetaObject TextView::staticMetaObject = {$/;"	m	class:TextView	file:
staticMetaObject	.\GeneratedFiles\Debug\moc_mainwindow.cpp	/^const QMetaObject MainWindow::staticMetaObject = {$/;"	m	class:MainWindow	file:
staticMetaObject	.\GeneratedFiles\Release\moc_FindDlg.cpp	/^const QMetaObject FindDlg::staticMetaObject = {$/;"	m	class:FindDlg	file:
staticMetaObject	.\GeneratedFiles\Release\moc_ReplaceDlg.cpp	/^const QMetaObject ReplaceDlg::staticMetaObject = {$/;"	m	class:ReplaceDlg	file:
staticMetaObject	.\GeneratedFiles\Release\moc_TextDocument.cpp	/^const QMetaObject TextDocument::staticMetaObject = {$/;"	m	class:TextDocument	file:
staticMetaObject	.\GeneratedFiles\Release\moc_TextView.cpp	/^const QMetaObject TextView::staticMetaObject = {$/;"	m	class:TextView	file:
staticMetaObject	.\GeneratedFiles\Release\moc_mainwindow.cpp	/^const QMetaObject MainWindow::staticMetaObject = {$/;"	m	class:MainWindow	file:
statusBar	.\GeneratedFiles\ui_mainwindow.h	/^    QStatusBar *statusBar;$/;"	m	class:Ui_MainWindowClass
std	.\gap_vector.h	/^namespace std {$/;"	n
strippedName	.\mainwindow.cpp	/^QString MainWindow::strippedName(const QString &fullFileName)$/;"	f	class:MainWindow
swapPositionAnchor	.\textCursor.cpp	/^void DocCursor::swapPositionAnchor()$/;"	f	class:DocCursor
swapPositionAnchor	.\textCursor.cpp	/^void ViewCursor::swapPositionAnchor()$/;"	f	class:ViewCursor
testViCommands	.\mainwindow.cpp	/^void MainWindow::testViCommands(QString fileName)$/;"	f	class:MainWindow
test_LaidoutBlock	.\mainwindowTest.cpp	/^void test_LaidoutBlock()$/;"	f
test_LaidoutBlocksMgr	.\mainwindowTest.cpp	/^void test_LaidoutBlocksMgr()$/;"	f
test_TextDocument	.\mainwindowTest.cpp	/^void test_TextDocument()$/;"	f
test_TextDocumentUndoRedo	.\mainwindowTest.cpp	/^void test_TextDocumentUndoRedo()$/;"	f
test_TextView	.\mainwindowTest.cpp	/^void test_TextView()$/;"	f
text	.\textBlock.cpp	/^QString DocBlock::text() const$/;"	f	class:DocBlock
text	.\textBlock.cpp	/^QString LaidoutBlock::text() const$/;"	f	class:LaidoutBlock
text	.\textBlock.cpp	/^QString ViewBlock::text() const$/;"	f	class:ViewBlock
textBlockToY	.\TextView.cpp	/^int TextView::textBlockToY(const ViewBlock &block) const$/;"	f	class:TextView
textCursor	.\TextView.h	/^	ViewCursor	textCursor() { return *m_textCursor; }$/;"	f	class:TextView
toPlainText	.\TextView.cpp	/^QString TextView::toPlainText() const$/;"	f	class:TextView
toPlainText	.\TextDocument.cpp	/^QString TextDocument::toPlainText() const$/;"	f	class:TextDocument
uchar	.\TextDocument.h	/^typedef unsigned char uchar;$/;"	t
uchar	.\charEncoding.h	/^typedef unsigned char uchar;$/;"	t
uint	.\gap_vector.h	/^typedef unsigned int uint;$/;"	t
uint	.\unit_test.h	/^typedef unsigned int uint;$/;"	t
undo	.\TextView.cpp	/^void TextView::undo()$/;"	f	class:TextView
undoAct	.\mainwindow.h	/^    QAction *undoAct;$/;"	m	class:MainWindow
unitTestAct	.\mainwindow.h	/^    QAction	*unitTestAct;$/;"	m	class:MainWindow
unitTestDocAct	.\mainwindow.h	/^    QAction	*unitTestDocAct;$/;"	m	class:MainWindow
unitTestViewAct	.\mainwindow.h	/^    QAction	*unitTestViewAct;$/;"	m	class:MainWindow
unit_test	.\unit_test.cpp	/^namespace unit_test {$/;"	n	file:
unit_test	.\unit_test.h	/^namespace unit_test {$/;"	n
updateBlockData	.\textCursor.cpp	/^void DocCursor::updateBlockData(uchar mode)$/;"	f	class:DocCursor
updateBlockData	.\textCursor.cpp	/^void ViewCursor::updateBlockData(uchar mode)$/;"	f	class:ViewCursor
updateBlocks	.\TextView.cpp	/^void TextView::updateBlocks()$/;"	f	class:TextView
updateBlocksAtErase	.\TextDocument.cpp	/^void TextDocument::updateBlocksAtErase(index_t first,$/;"	f	class:TextDocument
updateBlocksAtInsert	.\TextDocument.cpp	/^void TextDocument::updateBlocksAtInsert(index_t first,$/;"	f	class:TextDocument
updateCurFile	.\mainwindow.cpp	/^void MainWindow::updateCurFile()$/;"	f	class:MainWindow
updateLineNumberAreaSize	.\TextView.cpp	/^void TextView::updateLineNumberAreaSize()$/;"	f	class:TextView
updateRecentFileActions	.\mainwindow.cpp	/^void MainWindow::updateRecentFileActions()$/;"	f	class:MainWindow
updateScrollBarData	.\TextView.cpp	/^void TextView::updateScrollBarData()$/;"	f	class:TextView
updateViewBlock	.\textCursor.cpp	/^void ViewCursor::updateViewBlock()$/;"	f	class:ViewCursor
updateWindowTitle	.\mainwindow.cpp	/^void MainWindow::updateWindowTitle()$/;"	f	class:MainWindow
ut_output	.\unit_test.cpp	/^void ut_output(const QString &mess)$/;"	f
ut_set_output	.\unit_test.cpp	/^void ut_set_output(OutputFunc f)$/;"	f
ut_test	.\unit_test.h	46;"	d
ut_test_equal	.\unit_test.h	47;"	d
v_findBlockByNumber	.\mainwindowBench.cpp	/^void v_findBlockByNumber(uint n)$/;"	f
v_laidout	.\mainwindowBench.cpp	/^void v_laidout(uint n)$/;"	f
value_type	.\gap_vector.h	/^	typedef Type value_type;$/;"	t	class:std::gap_vector
viCtrlCmd	.\ViEngine.cpp	/^bool viCtrlCmd[] = $/;"	v
view	.\textCursor.h	/^	TextView	*view() { return m_view; }$/;"	f	class:ViewCursor
view	.\textCursor.h	/^	const TextView	*view() const { return m_view; }$/;"	f	class:ViewCursor
view	.\textBlock.h	/^	const TextView	*view() const { return m_view; }$/;"	f	class:ViewBlock
viewAnchorBlockData	.\textCursor.h	/^	BlockData	viewAnchorBlockData() const { return m_viewAnchorBlockData; }$/;"	f	class:ViewCursor
viewAnchorBlockNumber	.\textCursor.h	/^	index_t	viewAnchorBlockNumber() const { return m_viewAnchorBlockData.index(); }$/;"	f	class:ViewCursor
viewBlockCount	.\textBlock.cpp	/^size_t LaidoutBlocksMgr::viewBlockCount() const$/;"	f	class:LaidoutBlocksMgr
viewBlockCount	.\textBlock.h	/^	size_t	viewBlockCount() const$/;"	f	struct:LaidoutChunk
viewBlockData	.\textCursor.h	/^	BlockData	viewBlockData() const { return m_viewBlockData; }$/;"	f	class:ViewCursor
viewBlockData	.\textBlock.h	/^	BlockData	viewBlockData() const { return BlockData(blockNumber(), position()); }$/;"	f	class:LaidoutBlock
viewBlockNumber	.\textCursor.h	/^	index_t	viewBlockNumber() const { return m_viewBlockData.index(); }$/;"	f	class:ViewCursor
viewBlockNumber	.\textBlock.h	/^	index_t		viewBlockNumber() const { return m_viewBlock.index(); }$/;"	f	class:ViewBlock
viewBlockSize	.\textBlock.cpp	/^size_t LaidoutBlocksMgr::viewBlockSize(index_t viewBlockNumber) const$/;"	f	class:LaidoutBlocksMgr
viewMenu	.\mainwindow.h	/^    QMenu	*viewMenu;$/;"	m	class:MainWindow
viewcBlockCount	.\textBlock.cpp	/^size_t LaidoutBlocksMgr::viewcBlockCount() const$/;"	f	class:LaidoutBlocksMgr
wheelEvent	.\TextView.cpp	/^void TextView::wheelEvent ( QWheelEvent * event )$/;"	f	class:TextView
width	.\textBlock.h	/^	int		width() const { return m_width; }$/;"	f	class:LaidoutBlocksMgr
withBOM	.\TextView.cpp	/^bool TextView::withBOM() const$/;"	f	class:TextView
withBOM	.\TextDocument.h	/^	bool	withBOM() const { return m_withBOM; }$/;"	f	class:TextDocument
wordwrapAct	.\mainwindow.h	/^    QAction *wordwrapAct;		\/\/	右端で折り返し$/;"	m	class:MainWindow
writeSettings	.\mainwindow.cpp	/^void MainWindow::writeSettings()$/;"	f	class:MainWindow
x	.\textCursor.h	/^	int		x() const { return m_x; }$/;"	f	class:ViewCursor
xToCharCount	.\TextView.cpp	/^int TextView::xToCharCount(const QString &text, int x) const$/;"	f	class:TextView
yToTextBlock	.\TextView.cpp	/^ViewBlock TextView::yToTextBlock(int py) const$/;"	f	class:TextView
yankText	.\ViEngine.cpp	/^QString ViEngine::yankText() const$/;"	f	class:ViEngine
~CUnitTest	.\unit_test.cpp	/^CUnitTest::~CUnitTest(void)$/;"	f	class:CUnitTest
~DocBlock	.\textBlock.h	/^	~DocBlock() {}$/;"	f	class:DocBlock
~DocCursor	.\textCursor.h	/^	~DocCursor() {}$/;"	f	class:DocCursor
~FindDlg	.\FindDlg.cpp	/^FindDlg::~FindDlg()$/;"	f	class:FindDlg
~GVUndoMgr	.\TextDocument.h	/^	~GVUndoMgr()$/;"	f	class:GVUndoMgr
~LayoutThread	.\LayoutThread.cpp	/^LayoutThread::~LayoutThread()$/;"	f	class:LayoutThread
~MainWindow	.\mainwindow.cpp	/^MainWindow::~MainWindow()$/;"	f	class:MainWindow
~ReplaceDlg	.\ReplaceDlg.cpp	/^ReplaceDlg::~ReplaceDlg()$/;"	f	class:ReplaceDlg
~SFailedInfo	.\unit_test.h	/^	~SFailedInfo() {};$/;"	f	struct:SFailedInfo
~TextDocument	.\TextDocument.cpp	/^TextDocument::~TextDocument()$/;"	f	class:TextDocument
~TextView	.\TextView.cpp	/^TextView::~TextView()$/;"	f	class:TextView
~ViEngine	.\ViEngine.cpp	/^ViEngine::~ViEngine()$/;"	f	class:ViEngine
~ViewCursor	.\textCursor.h	/^	~ViewCursor() {}$/;"	f	class:ViewCursor
~gap_vector	.\gap_vector.h	/^	~gap_vector()$/;"	f	class:std::gap_vector
